{
  "openapi": "3.0.1",
  "info": {
    "title": "Infodeck.io",
    "description": "Infodeck.io - API documentation",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://app.infodeck.io/api"
    }
  ],
  "paths": {
    "/organizations/{organizationId}/assets": {
      "post": {
        "summary": "Create Asset",
        "description": "Create asset",
        "operationId": "Asset.CreateAsset",
        "tags": ["Asset"],
        "parameters": [
          {
            "name": "organizationId",
            "description": "The ID of organization.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "assetTypeId": {
                    "type": "string",
                    "description": "The asset type ID."
                  },
                  "locationId": {
                    "type": "string",
                    "description": "The location ID."
                  },
                  "name": {
                    "type": "string",
                    "description": "The name of asset."
                  },
                  "description": {
                    "type": "string",
                    "description": "The description of asset."
                  },
                  "chatRoomId": {
                    "type": "string",
                    "description": "The ID of chat room."
                  },
                  "serialNumber": {
                    "type": "string",
                    "description": "The serial number of asset."
                  },
                  "modelName": {
                    "type": "string",
                    "description": "The model of name."
                  },
                  "nameOfManufacturer": {
                    "type": "string",
                    "description": "The name of manufacturer."
                  },
                  "yearOfManufacture": {
                    "type": "number",
                    "description": "The year of manufacture of asset."
                  },
                  "purchaseCost": {
                    "type": "number",
                    "description": "The purchase cost of asset."
                  },
                  "purchaseDate": {
                    "type": "number",
                    "description": "The purchase date of asset."
                  },
                  "warrantyEndDate": {
                    "type": "number",
                    "description": "The warranty end date of asset."
                  },
                  "image": {
                    "type": "string",
                    "description": "The image of asset."
                  },
                  "files": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "The files of asset."
                  }
                },
                "required": ["assetTypeId", "locationId", "name"]
              },
              "example": {
                "assetTypeId": "a-assetTypeId",
                "locationId": "l-locationId",
                "name": "IDT-Bot",
                "description": "IDT-Description",
                "chatRoomId": "ABCDE",
                "serialNumber": "123456789",
                "modelName": "Bot-Model-Name",
                "nameOfManufacturer": "Bot-Manufacturer",
                "yearOfManufacture": 2024,
                "purchaseCost": 12345,
                "purchaseDate": 1700000000000,
                "warrantyEndDate": 1800000000000,
                "image": "Asset-Image.png",
                "files": ["Infodeck-Bot-0001.pdf"]
              },
              "description": ""
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "organizationId": {
                          "type": "string"
                        },
                        "id": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "assetTypeId": {
                          "type": "string"
                        },
                        "locationId": {
                          "type": "string"
                        },
                        "chatRoomId": {
                          "type": "string"
                        },
                        "serialNumber": {
                          "type": "number"
                        },
                        "modelName": {
                          "type": "string"
                        },
                        "nameOfManufacturer": {
                          "type": "string"
                        },
                        "yearOfManufacture": {
                          "type": "number"
                        },
                        "purchaseCost": {
                          "type": "number"
                        },
                        "purchaseDate": {
                          "type": "string"
                        },
                        "warrantyEndDate": {
                          "type": "string"
                        },
                        "images": {
                          "type": "string"
                        },
                        "files": {
                          "type": "string"
                        },
                        "createdAt": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "organizationId",
                        "id",
                        "name",
                        "description",
                        "assetTypeId",
                        "locationId",
                        "createdAt"
                      ]
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "404": {
            "description": "The resource hasn't found."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      },
      "get": {
        "summary": "List Assets",
        "description": "List assets",
        "operationId": "Asset.ListAssets",
        "tags": ["Asset"],
        "parameters": [
          {
            "name": "organizationId",
            "description": "The ID of organization.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "devEui",
            "description": "The devEui of device to filter assets.",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "isIotDevice",
            "description": "List IoT devices assets only.",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "assetTypeId",
            "description": "The ID of asset type to filter assets.",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "locationId",
            "description": "The ID of location to filter assets.",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "maxResults",
            "description": "The maximum number of results to return.",
            "in": "query",
            "schema": {
              "type": "number"
            },
            "required": false
          },
          {
            "name": "nextToken",
            "description": "To retrieve the next set of results.",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "shadowNames",
            "description": "Specify shadow names to fetch. (Default: DeviceUplink)",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "required": false
          }
        ],
        "requestBody": {},
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "organizationId": {
                            "type": "string"
                          },
                          "id": {
                            "type": "string"
                          },
                          "name": {
                            "type": "string"
                          },
                          "description": {
                            "type": "string"
                          },
                          "assetTypeId": {
                            "type": "string"
                          },
                          "locationId": {
                            "type": "string"
                          },
                          "chatRoomId": {
                            "type": "string"
                          },
                          "serialNumber": {
                            "type": "number"
                          },
                          "modelName": {
                            "type": "string"
                          },
                          "nameOfManufacturer": {
                            "type": "string"
                          },
                          "yearOfManufacture": {
                            "type": "number"
                          },
                          "purchaseCost": {
                            "type": "number"
                          },
                          "purchaseDate": {
                            "type": "string"
                          },
                          "warrantyEndDate": {
                            "type": "string"
                          },
                          "images": {
                            "type": "string"
                          },
                          "files": {
                            "type": "string"
                          },
                          "createdAt": {
                            "type": "string"
                          },
                          "updatedAt": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "organizationId",
                          "id",
                          "name",
                          "description",
                          "assetTypeId",
                          "locationId",
                          "createdAt",
                          "updatedAt"
                        ]
                      }
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "404": {
            "description": "The resource hasn't found."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      }
    },
    "/organizations/{organizationId}/asset-categories": {
      "post": {
        "summary": "Create Asset Category",
        "description": "Create asset category",
        "operationId": "Asset.CreateAssetCategory",
        "tags": ["Asset"],
        "parameters": [
          {
            "name": "organizationId",
            "description": "The ID of organization.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of asset category"
                  },
                  "description": {
                    "type": "string",
                    "description": "The description of asset category"
                  },
                  "attributes": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "The custom attributes of asset category"
                  }
                },
                "required": ["name"]
              },
              "example": {
                "name": "IDT-Bot-Asset-Category",
                "description": "IDT-Asset-Category-Description",
                "attributes": ["Test-A", "Test-B", "Test-C"]
              },
              "description": ""
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "name": {
                            "type": "string"
                          },
                          "description": {
                            "type": "string"
                          },
                          "thingTypeArn": {
                            "type": "string"
                          },
                          "attributes": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "key": {
                                  "type": "string"
                                },
                                "value": {
                                  "type": "string"
                                }
                              },
                              "required": ["key", "value"]
                            }
                          },
                          "createdAt": {
                            "type": "string"
                          },
                          "deprecated": {
                            "type": "boolean"
                          },
                          "deprecatedAt": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "id",
                          "name",
                          "description",
                          "thingTypeArn",
                          "attributes",
                          "createdAt",
                          "deprecated",
                          "deprecatedAt"
                        ]
                      }
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "404": {
            "description": "The resource hasn't found."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      },
      "get": {
        "summary": "List Asset Categories",
        "description": "List asset categories",
        "operationId": "Asset.ListAssetCategories",
        "tags": ["Asset"],
        "parameters": [
          {
            "name": "organizationId",
            "description": "The ID of organization.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "maxResults",
            "description": "The maximum number of results to return.",
            "in": "query",
            "schema": {
              "type": "number"
            },
            "required": false
          },
          {
            "name": "nextToken",
            "description": "To retrieve the next set of results.",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false
          }
        ],
        "requestBody": {},
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "name": {
                            "type": "string"
                          },
                          "description": {
                            "type": "string"
                          },
                          "thingTypeArn": {
                            "type": "string"
                          },
                          "attributes": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "key": {
                                  "type": "string"
                                },
                                "value": {
                                  "type": "string"
                                }
                              },
                              "required": ["key", "value"]
                            }
                          },
                          "createdAt": {
                            "type": "string"
                          },
                          "deprecated": {
                            "type": "boolean"
                          },
                          "deprecatedAt": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "id",
                          "name",
                          "description",
                          "thingTypeArn",
                          "attributes",
                          "createdAt",
                          "deprecated",
                          "deprecatedAt"
                        ]
                      }
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "404": {
            "description": "The resource hasn't found."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      }
    },
    "/organizations/{organizationId}/asset-types": {
      "post": {
        "summary": "Create Asset Type",
        "description": "Create asset type",
        "operationId": "Asset.CreateAssetType",
        "tags": ["Asset"],
        "parameters": [
          {
            "name": "organizationId",
            "description": "The ID of organization.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of asset type"
                  },
                  "description": {
                    "type": "string",
                    "description": "The description of asset type"
                  },
                  "supportedAssetTypeId": {
                    "type": "string",
                    "description": "The id of supported model"
                  },
                  "image": {
                    "type": "string",
                    "description": "The custom image of asset type"
                  },
                  "encodeCodec": {
                    "type": "string",
                    "description": "The encode codec of asset type"
                  },
                  "decodeCodec": {
                    "type": "string",
                    "description": "The decode codec of asset type"
                  },
                  "isIotDevice": {
                    "type": "boolean",
                    "description": "Is the asset an IoT device?"
                  },
                  "properties": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {},
                      "required": []
                    },
                    "description": "The properties of asset type"
                  },
                  "actions": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {},
                      "required": []
                    },
                    "description": "The actions of asset type"
                  }
                },
                "required": ["name", "isIotDevice"]
              },
              "example": {
                "name": "IDT-Bot-AssetType",
                "description": "IDT-AssetType-Description",
                "supportedAssetTypeId": "Infodeck-NS300-ABC",
                "image": "Asset-Type-Image.png",
                "encodeCodec": "function encodeDownlink(input) {\n  const bytes = [];\n\n  return {\n    bytes,\n  };\n}",
                "decodeCodec": "function decodeUplink(input) {\n  const bytes = input.bytes;\n  const data = {};\n\n  return {\n    data,\n  };\n}",
                "isIotDevice": true,
                "properties": [
                  {
                    "key": "Power",
                    "name": "Power",
                    "type": "integer",
                    "unit": "W"
                  }
                ],
                "actions": [
                  {
                    "confirmed": true,
                    "fPort": 85,
                    "name": "Power On",
                    "payload": "080100ff",
                    "payloadDataType": "Hex"
                  }
                ]
              },
              "description": ""
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "name": {
                            "type": "string"
                          },
                          "description": {
                            "type": "string"
                          },
                          "thingTypeArn": {
                            "type": "string"
                          },
                          "attributes": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "key": {
                                  "type": "string"
                                },
                                "value": {
                                  "type": "string"
                                }
                              },
                              "required": ["key", "value"]
                            }
                          },
                          "createdAt": {
                            "type": "string"
                          },
                          "deprecated": {
                            "type": "boolean"
                          },
                          "deprecatedAt": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "id",
                          "name",
                          "description",
                          "thingTypeArn",
                          "attributes",
                          "createdAt",
                          "deprecated",
                          "deprecatedAt"
                        ]
                      }
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "404": {
            "description": "The resource hasn't found."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      },
      "get": {
        "summary": "List Asset Types",
        "description": "List asset types",
        "operationId": "Asset.ListAssetTypes",
        "tags": ["Asset"],
        "parameters": [
          {
            "name": "organizationId",
            "description": "The ID of organization.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "maxResults",
            "description": "The maximum number of results to return.",
            "in": "query",
            "schema": {
              "type": "number",
              "minimum": 10,
              "maximum": 25
            },
            "required": false
          },
          {
            "name": "nextToken",
            "description": "To retrieve the next set of results.",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false
          }
        ],
        "requestBody": {},
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "name": {
                            "type": "string"
                          },
                          "description": {
                            "type": "string"
                          },
                          "thingTypeArn": {
                            "type": "string"
                          },
                          "attributes": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "key": {
                                  "type": "string"
                                },
                                "value": {
                                  "type": "string"
                                }
                              },
                              "required": ["key", "value"]
                            }
                          },
                          "createdAt": {
                            "type": "string"
                          },
                          "deprecated": {
                            "type": "boolean"
                          },
                          "deprecatedAt": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "id",
                          "name",
                          "description",
                          "thingTypeArn",
                          "attributes",
                          "createdAt",
                          "deprecated",
                          "deprecatedAt"
                        ]
                      }
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "404": {
            "description": "The resource hasn't found."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      }
    },
    "/supported-asset-types": {
      "post": {
        "summary": "Create Supported Asset Type",
        "description": "Create Supported asset type",
        "operationId": "Asset.CreateSupportedAssetType",
        "tags": ["Asset"],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of asset type"
                  },
                  "description": {
                    "type": "string",
                    "description": "The description of asset type"
                  },
                  "brand": {
                    "type": "string",
                    "description": "The brand of asset type"
                  },
                  "model": {
                    "type": "string",
                    "description": "The model of asset type"
                  },
                  "image": {
                    "type": "string",
                    "description": "The custom image of asset type"
                  },
                  "encodeCodec": {
                    "type": "string",
                    "description": "The encode codec of asset type"
                  },
                  "decodeCodec": {
                    "type": "string",
                    "description": "The decode codec of asset type"
                  },
                  "isIotDevice": {
                    "type": "boolean",
                    "description": "Is the asset an IoT device?"
                  },
                  "properties": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {},
                      "required": []
                    },
                    "description": "The properties of asset type"
                  },
                  "actions": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {},
                      "required": []
                    },
                    "description": "The actions of asset type"
                  }
                },
                "required": ["name", "brand", "model", "isIotDevice"]
              },
              "example": {},
              "description": ""
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "image": {
                          "type": "string"
                        },
                        "isIotDevice": {
                          "type": "string"
                        },
                        "brand": {
                          "type": "string"
                        },
                        "model": {
                          "type": "string"
                        },
                        "encodeCodec": {
                          "type": "string"
                        },
                        "decodeCodec": {
                          "type": "string"
                        },
                        "properties": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {},
                            "required": []
                          }
                        },
                        "createdAt": {
                          "type": "string"
                        },
                        "createdBy": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "id",
                        "name",
                        "description",
                        "image",
                        "isIotDevice",
                        "brand",
                        "model",
                        "encodeCodec",
                        "decodeCodec",
                        "properties",
                        "createdAt",
                        "createdBy"
                      ]
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "404": {
            "description": "The resource hasn't found."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      },
      "get": {
        "summary": "List Supported Asset Types",
        "description": "List Supported asset types",
        "operationId": "Asset.ListSupportedAssetTypes",
        "tags": ["Asset"],
        "parameters": [
          {
            "name": "maxResults",
            "description": "The maximum number of results to return.",
            "in": "query",
            "schema": {
              "type": "number",
              "minimum": 10,
              "maximum": 25
            },
            "required": false
          },
          {
            "name": "nextToken",
            "description": "To retrieve the next set of results.",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false
          }
        ],
        "requestBody": {},
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "image": {
                          "type": "string"
                        },
                        "isIotDevice": {
                          "type": "string"
                        },
                        "brand": {
                          "type": "string"
                        },
                        "model": {
                          "type": "string"
                        },
                        "encodeCodec": {
                          "type": "string"
                        },
                        "decodeCodec": {
                          "type": "string"
                        },
                        "properties": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {},
                            "required": []
                          }
                        },
                        "actions": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {},
                            "required": []
                          }
                        },
                        "createdAt": {
                          "type": "string"
                        },
                        "createdBy": {
                          "type": "string"
                        },
                        "updatedAt": {
                          "type": "string"
                        },
                        "updatedBy": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "id",
                        "name",
                        "description",
                        "image",
                        "isIotDevice",
                        "brand",
                        "model",
                        "encodeCodec",
                        "decodeCodec",
                        "properties",
                        "actions",
                        "createdAt",
                        "createdBy",
                        "updatedAt",
                        "updatedBy"
                      ]
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "404": {
            "description": "The resource hasn't found."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      }
    },
    "/organizations/{organizationId}/assets/{assetId}": {
      "delete": {
        "summary": "Delete Asset",
        "description": "Delete asset",
        "operationId": "Asset.DeleteAsset",
        "tags": ["Asset"],
        "parameters": [
          {
            "name": "organizationId",
            "description": "The ID of organization.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assetId",
            "description": "The ID of asset",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {},
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {},
                      "required": []
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "404": {
            "description": "The resource hasn't found."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      },
      "get": {
        "summary": "Get Asset",
        "description": "Get asset",
        "operationId": "Asset.GetAsset",
        "tags": ["Asset"],
        "parameters": [
          {
            "name": "organizationId",
            "description": "The ID of organization.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assetId",
            "description": "The ID of asset",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "shadowNames",
            "description": "Specify shadow names to fetch. (Default: DeviceUplink)",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "required": false
          }
        ],
        "requestBody": {},
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "organizationId": {
                          "type": "string"
                        },
                        "id": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "assetTypeId": {
                          "type": "string"
                        },
                        "locationId": {
                          "type": "string"
                        },
                        "chatRoomId": {
                          "type": "string"
                        },
                        "serialNumber": {
                          "type": "number"
                        },
                        "modelName": {
                          "type": "string"
                        },
                        "nameOfManufacturer": {
                          "type": "string"
                        },
                        "yearOfManufacture": {
                          "type": "number"
                        },
                        "purchaseCost": {
                          "type": "number"
                        },
                        "purchaseDate": {
                          "type": "string"
                        },
                        "warrantyEndDate": {
                          "type": "string"
                        },
                        "images": {
                          "type": "string"
                        },
                        "files": {
                          "type": "string"
                        },
                        "createdAt": {
                          "type": "string"
                        },
                        "updatedAt": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "organizationId",
                        "id",
                        "name",
                        "description",
                        "assetTypeId",
                        "locationId",
                        "createdAt",
                        "updatedAt"
                      ]
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "404": {
            "description": "The resource hasn't found."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      },
      "put": {
        "summary": "Update Asset",
        "description": "Update asset",
        "operationId": "Asset.UpdateAsset",
        "tags": ["Asset"],
        "parameters": [
          {
            "name": "organizationId",
            "description": "The ID of organization.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assetId",
            "description": "The ID of asset",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of asset"
                  },
                  "description": {
                    "type": "string",
                    "description": "The description of asset"
                  },
                  "chatRoomId": {
                    "type": "string",
                    "description": "The ID of chat room"
                  },
                  "serialNumber": {
                    "type": "string",
                    "description": "The serial number of asset"
                  },
                  "modelName": {
                    "type": "string",
                    "description": "The serial number of asset"
                  },
                  "nameOfManufacturer": {
                    "type": "string",
                    "description": "The name of manufacturer"
                  },
                  "yearOfManufacture": {
                    "type": "number",
                    "description": "The year of manufacture of asset"
                  },
                  "purchaseCost": {
                    "type": "number",
                    "description": "The purchase cost of asset"
                  },
                  "purchaseDate": {
                    "type": "number",
                    "description": "The purchase date of asset"
                  },
                  "warrantyEndDate": {
                    "type": "number",
                    "description": "The warranty end date of asset"
                  },
                  "image": {
                    "type": "string",
                    "description": "The image of asset"
                  },
                  "files": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "The files of asset"
                  }
                },
                "required": ["name"]
              },
              "example": {
                "name": "IDT-Bot",
                "description": "IDT-Description",
                "chatRoomId": "ABCDE",
                "serialNumber": "123456789",
                "modelName": "Bot-Model-Name",
                "nameOfManufacturer": "Bot-Manufacturer",
                "yearOfManufacture": 2024,
                "purchaseCost": 12345,
                "purchaseDate": 1700000000000,
                "warrantyEndDate": 1800000000000,
                "image": "Asset-Image.png",
                "files": ["Infodeck-Bot-0001.pdf"]
              },
              "description": ""
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "organizationId": {
                          "type": "string"
                        },
                        "id": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "assetTypeId": {
                          "type": "string"
                        },
                        "locationId": {
                          "type": "string"
                        },
                        "chatRoomId": {
                          "type": "string"
                        },
                        "serialNumber": {
                          "type": "number"
                        },
                        "modelName": {
                          "type": "string"
                        },
                        "nameOfManufacturer": {
                          "type": "string"
                        },
                        "yearOfManufacture": {
                          "type": "number"
                        },
                        "purchaseCost": {
                          "type": "number"
                        },
                        "purchaseDate": {
                          "type": "string"
                        },
                        "warrantyEndDate": {
                          "type": "string"
                        },
                        "images": {
                          "type": "string"
                        },
                        "files": {
                          "type": "string"
                        },
                        "createdAt": {
                          "type": "string"
                        },
                        "updatedAt": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "organizationId",
                        "id",
                        "name",
                        "description",
                        "assetTypeId",
                        "locationId",
                        "createdAt",
                        "updatedAt"
                      ]
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "404": {
            "description": "The resource hasn't found."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      }
    },
    "/organizations/{organizationId}/asset-categories/{assetCategoryId}": {
      "delete": {
        "summary": "Delete Asset Category",
        "description": "Delete asset category",
        "operationId": "Asset.DeleteAssetCategory",
        "tags": ["Asset"],
        "parameters": [
          {
            "name": "organizationId",
            "description": "The ID of organization.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assetCategoryId",
            "description": "The ID of asset",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {},
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {},
                      "required": []
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "404": {
            "description": "The resource hasn't found."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      },
      "get": {
        "summary": "Get Asset Category",
        "description": "Get asset category",
        "operationId": "Asset.GetAssetCategory",
        "tags": ["Asset"],
        "parameters": [
          {
            "name": "organizationId",
            "description": "The ID of organization.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assetCategoryId",
            "description": "The ID of asset",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {},
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "thingTypeArn": {
                          "type": "string"
                        },
                        "attributes": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "type": "string"
                              },
                              "value": {
                                "type": "string"
                              }
                            },
                            "required": ["key", "value"]
                          }
                        },
                        "createdAt": {
                          "type": "string"
                        },
                        "deprecated": {
                          "type": "boolean"
                        },
                        "deprecatedAt": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "id",
                        "name",
                        "description",
                        "thingTypeArn",
                        "attributes",
                        "createdAt",
                        "deprecated",
                        "deprecatedAt"
                      ]
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "404": {
            "description": "The resource hasn't found."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      },
      "put": {
        "summary": "Update Asset Category",
        "description": "Update asset category",
        "operationId": "Asset.UpdateAssetCategory",
        "tags": ["Asset"],
        "parameters": [
          {
            "name": "organizationId",
            "description": "The ID of organization.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assetCategoryId",
            "description": "The ID of asset",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of asset category"
                  },
                  "description": {
                    "type": "string",
                    "description": "The description of asset category"
                  },
                  "attributes": {
                    "type": "object",
                    "properties": {},
                    "required": [],
                    "description": "The custom attributes of asset category"
                  }
                },
                "required": ["name"]
              },
              "example": {
                "name": "IDT-Bot-Asset-Category",
                "description": "IDT-Asset-Category-Description",
                "attributes": ["Test-A", "Test-B", "Test-C"]
              },
              "description": ""
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "thingTypeArn": {
                          "type": "string"
                        },
                        "attributes": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "type": "string"
                              },
                              "value": {
                                "type": "string"
                              }
                            },
                            "required": ["key", "value"]
                          }
                        },
                        "createdAt": {
                          "type": "string"
                        },
                        "deprecated": {
                          "type": "boolean"
                        },
                        "deprecatedAt": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "id",
                        "name",
                        "description",
                        "thingTypeArn",
                        "attributes",
                        "createdAt",
                        "deprecated",
                        "deprecatedAt"
                      ]
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "404": {
            "description": "The resource hasn't found."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      }
    },
    "/organizations/{organizationId}/asset-types/{assetTypeId}": {
      "delete": {
        "summary": "Delete Asset Type",
        "description": "Delete asset type",
        "operationId": "Asset.DeleteAssetType",
        "tags": ["Asset"],
        "parameters": [
          {
            "name": "organizationId",
            "description": "The ID of organization.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assetTypeId",
            "description": "The ID of asset type.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {},
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {},
                      "required": []
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "404": {
            "description": "The resource hasn't found."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      },
      "get": {
        "summary": "Get Asset Type",
        "description": "Get asset type",
        "operationId": "Asset.GetAssetType",
        "tags": ["Asset"],
        "parameters": [
          {
            "name": "organizationId",
            "description": "The ID of organization.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assetTypeId",
            "description": "The ID of asset type",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {},
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "thingTypeArn": {
                          "type": "string"
                        },
                        "attributes": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "type": "string"
                              },
                              "value": {
                                "type": "string"
                              }
                            },
                            "required": ["key", "value"]
                          }
                        },
                        "createdAt": {
                          "type": "string"
                        },
                        "deprecated": {
                          "type": "boolean"
                        },
                        "deprecatedAt": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "id",
                        "name",
                        "description",
                        "thingTypeArn",
                        "attributes",
                        "createdAt",
                        "deprecated",
                        "deprecatedAt"
                      ]
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "404": {
            "description": "The resource hasn't found."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      },
      "put": {
        "summary": "Update Asset Type",
        "description": "Update asset type",
        "operationId": "Asset.UpdateAssetType",
        "tags": ["Asset"],
        "parameters": [
          {
            "name": "organizationId",
            "description": "The ID of organization.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assetTypeId",
            "description": "The ID of asset",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of asset type"
                  },
                  "description": {
                    "type": "string",
                    "description": "The description of asset type"
                  },
                  "supportedAssetTypeId": {
                    "type": "string",
                    "description": "The id of supported model"
                  },
                  "isIotDevice": {
                    "type": "string",
                    "description": "Is the asset an IoT device?"
                  },
                  "image": {
                    "type": "string",
                    "description": "The custom image of asset type"
                  },
                  "encodeCodec": {
                    "type": "string",
                    "description": "The encode codec of asset type"
                  },
                  "decodeCodec": {
                    "type": "string",
                    "description": "The decode codec of asset type"
                  },
                  "properties": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {},
                      "required": []
                    },
                    "description": "The properties of asset type"
                  },
                  "actions": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {},
                      "required": []
                    },
                    "description": "The actions of asset type"
                  }
                },
                "required": ["name", "isIotDevice"]
              },
              "example": {
                "name": "IDT-Bot-AssetType",
                "description": "IDT-AssetType-Description",
                "supportedAssetTypeId": "Infodeck-NS300-ABC",
                "image": "Asset-Type-Image.png",
                "encodeCodec": "function encodeDownlink(input) {\n  const bytes = [];\n\n  return {\n    bytes,\n  };\n}",
                "decodeCodec": "function decodeUplink(input) {\n  const bytes = input.bytes;\n  const data = {};\n\n  return {\n    data,\n  };\n}",
                "isIotDevice": true,
                "properties": [
                  {
                    "key": "Power",
                    "name": "Power",
                    "type": "integer",
                    "unit": "W"
                  }
                ],
                "actions": [
                  {
                    "confirmed": true,
                    "fPort": 85,
                    "name": "Power On",
                    "payload": "080100ff",
                    "payloadDataType": "Hex"
                  }
                ]
              },
              "description": ""
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "thingTypeArn": {
                          "type": "string"
                        },
                        "attributes": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "type": "string"
                              },
                              "value": {
                                "type": "string"
                              }
                            },
                            "required": ["key", "value"]
                          }
                        },
                        "createdAt": {
                          "type": "string"
                        },
                        "deprecated": {
                          "type": "boolean"
                        },
                        "deprecatedAt": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "id",
                        "name",
                        "description",
                        "thingTypeArn",
                        "attributes",
                        "createdAt",
                        "deprecated",
                        "deprecatedAt"
                      ]
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "404": {
            "description": "The resource hasn't found."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      }
    },
    "/supported-asset-types/{id}": {
      "delete": {
        "summary": "Delete Supported Asset Type",
        "description": "Delete supported asset type",
        "operationId": "Asset.DeleteSupportedAssetType",
        "tags": ["Asset"],
        "parameters": [
          {
            "name": "id",
            "description": "The ID of asset",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {},
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {},
                      "required": []
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "404": {
            "description": "The resource hasn't found."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      },
      "get": {
        "summary": "Get Supported Asset Type",
        "description": "Get Supported Asset Type",
        "operationId": "Asset.GetSupportedAssetType",
        "tags": ["Asset"],
        "parameters": [
          {
            "name": "id",
            "description": "The ID of supported asset type",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {},
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "image": {
                          "type": "string"
                        },
                        "isIotDevice": {
                          "type": "string"
                        },
                        "brand": {
                          "type": "string"
                        },
                        "model": {
                          "type": "string"
                        },
                        "encodeCodec": {
                          "type": "string"
                        },
                        "decodeCodec": {
                          "type": "string"
                        },
                        "properties": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {},
                            "required": []
                          }
                        },
                        "actions": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {},
                            "required": []
                          }
                        },
                        "createdAt": {
                          "type": "string"
                        },
                        "createdBy": {
                          "type": "string"
                        },
                        "updatedAt": {
                          "type": "string"
                        },
                        "updatedBy": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "id",
                        "name",
                        "description",
                        "image",
                        "isIotDevice",
                        "brand",
                        "model",
                        "encodeCodec",
                        "decodeCodec",
                        "properties",
                        "actions",
                        "createdAt",
                        "createdBy",
                        "updatedAt",
                        "updatedBy"
                      ]
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "404": {
            "description": "The resource hasn't found."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      },
      "put": {
        "summary": "Update Supported Asset Type",
        "description": "Update Supported asset type",
        "operationId": "Asset.UpdateSupportedAssetType",
        "tags": ["Asset"],
        "parameters": [
          {
            "name": "id",
            "description": "The ID of asset",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of asset type"
                  },
                  "description": {
                    "type": "string",
                    "description": "The description of asset type"
                  },
                  "brand": {
                    "type": "string",
                    "description": "The brand of asset type"
                  },
                  "model": {
                    "type": "string",
                    "description": "The model of asset type"
                  },
                  "isIotDevice": {
                    "type": "boolean",
                    "description": "The asset is an IoT device"
                  },
                  "image": {
                    "type": "string",
                    "description": "The custom image of asset type"
                  },
                  "encodeCodec": {
                    "type": "string",
                    "description": "The encode codec of asset type"
                  },
                  "decodeCodec": {
                    "type": "string",
                    "description": "The decode codec of asset type"
                  },
                  "properties": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {},
                      "required": []
                    },
                    "description": "The properties of asset type"
                  },
                  "actions": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {},
                      "required": []
                    },
                    "description": "The actions of asset type"
                  }
                },
                "required": ["name", "brand", "model", "isIotDevice"]
              },
              "example": {},
              "description": ""
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "image": {
                          "type": "string"
                        },
                        "isIotDevice": {
                          "type": "string"
                        },
                        "brand": {
                          "type": "string"
                        },
                        "model": {
                          "type": "string"
                        },
                        "encodeCodec": {
                          "type": "string"
                        },
                        "decodeCodec": {
                          "type": "string"
                        },
                        "properties": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {},
                            "required": []
                          }
                        },
                        "createdAt": {
                          "type": "string"
                        },
                        "createdBy": {
                          "type": "string"
                        },
                        "updatedAt": {
                          "type": "string"
                        },
                        "updatedBy": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "id",
                        "name",
                        "description",
                        "image",
                        "isIotDevice",
                        "brand",
                        "model",
                        "encodeCodec",
                        "decodeCodec",
                        "properties",
                        "createdAt",
                        "createdBy",
                        "updatedAt",
                        "updatedBy"
                      ]
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "404": {
            "description": "The resource hasn't found."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      }
    },
    "/organizations/{organizationId}/assets/{assetId}/metrics": {
      "get": {
        "summary": "Get metric data by asset ID",
        "description": "Get Metric Data By Asset ID for Organization",
        "operationId": "Asset.GetMetricDataByAssetId",
        "tags": ["Asset"],
        "parameters": [
          {
            "name": "organizationId",
            "description": "The ID of organization.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assetId",
            "description": "The ID of asset.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "days",
            "description": "The day of metric.",
            "in": "query",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 32
            },
            "required": true
          },
          {
            "name": "metricName",
            "description": "The name of IoT things.",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "maxResults",
            "description": "The maximum number of results to return.",
            "in": "query",
            "schema": {
              "type": "number",
              "minimum": 10,
              "maximum": 100
            },
            "required": false
          },
          {
            "name": "nextToken",
            "description": "To retrieve the next set of results.",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false
          }
        ],
        "requestBody": {},
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {},
                        "required": []
                      }
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "404": {
            "description": "The resource hasn't found."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      }
    },
    "/organizations/{organizationId}/assets/{assetId}/logs": {
      "get": {
        "summary": "List Assets Logs",
        "description": "List assets logs",
        "operationId": "Asset.ListAssetLogs",
        "tags": ["Asset"],
        "parameters": [
          {
            "name": "organizationId",
            "description": "The ID of organization.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assetId",
            "description": "The ID of the asset (Allow all).",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDate",
            "description": "The start date number of query.",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "endDate",
            "description": "The end date number of query.",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "maxResults",
            "description": "The maximum number of results to return.",
            "in": "query",
            "schema": {
              "type": "number",
              "default": 10
            },
            "required": false
          },
          {
            "name": "nextToken",
            "description": "To retrieve the next set of results.",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false
          }
        ],
        "requestBody": {},
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "assetId": {
                            "type": "string"
                          },
                          "organizationId": {
                            "type": "string"
                          },
                          "createdAt": {
                            "type": "string"
                          },
                          "eventName": {
                            "type": "string"
                          },
                          "payload": {
                            "type": "string"
                          },
                          "metadata": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "assetId",
                          "organizationId",
                          "createdAt",
                          "eventName",
                          "payload",
                          "metadata"
                        ]
                      }
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "404": {
            "description": "The resource hasn't found."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      }
    },
    "/organizations/{organizationId}/asset-categories/{assetCategoryId}/assets": {
      "get": {
        "summary": "List Asset In Asset Category",
        "description": "List assets in asset category",
        "operationId": "Asset.ListAssetsInAssetCategory",
        "tags": ["Asset"],
        "parameters": [
          {
            "name": "organizationId",
            "description": "The ID of organization.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assetCategoryId",
            "description": "The ID of asset",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "maxResults",
            "description": "The maximum number of results to return.",
            "in": "query",
            "schema": {
              "type": "number"
            },
            "required": false
          },
          {
            "name": "nextToken",
            "description": "To retrieve the next set of results.",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false
          }
        ],
        "requestBody": {},
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "organizationId": {
                            "type": "string"
                          },
                          "id": {
                            "type": "string"
                          },
                          "name": {
                            "type": "string"
                          },
                          "description": {
                            "type": "string"
                          },
                          "assetTypeId": {
                            "type": "string"
                          },
                          "locationId": {
                            "type": "string"
                          },
                          "chatRoomId": {
                            "type": "string"
                          },
                          "serialNumber": {
                            "type": "number"
                          },
                          "modelName": {
                            "type": "string"
                          },
                          "nameOfManufacturer": {
                            "type": "string"
                          },
                          "yearOfManufacture": {
                            "type": "number"
                          },
                          "purchaseCost": {
                            "type": "number"
                          },
                          "purchaseDate": {
                            "type": "string"
                          },
                          "warrantyEndDate": {
                            "type": "string"
                          },
                          "images": {
                            "type": "string"
                          },
                          "files": {
                            "type": "string"
                          },
                          "createdAt": {
                            "type": "string"
                          },
                          "updatedAt": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "organizationId",
                          "id",
                          "name",
                          "description",
                          "assetTypeId",
                          "locationId",
                          "createdAt",
                          "updatedAt"
                        ]
                      }
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "404": {
            "description": "The resource hasn't found."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      }
    },
    "/app-clients/{appClientId}": {
      "get": {
        "summary": "Get App Client",
        "description": "Get app client",
        "operationId": "Authentication.GetAppClient",
        "tags": ["Authentication"],
        "parameters": [
          {
            "name": "appClientId",
            "description": "The client id of application.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {},
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "clientId": {
                          "type": "string"
                        },
                        "clientName": {
                          "type": "string"
                        },
                        "callbackUrls": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "logoutUrls": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      },
                      "required": [
                        "clientId",
                        "clientName",
                        "callbackUrls",
                        "logoutUrls"
                      ]
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "404": {
            "description": "The resource hasn't found."
          }
        },
        "security": []
      }
    },
    "/authentications/tokens": {
      "post": {
        "summary": "Get authentication token",
        "description": "Get authentication token",
        "operationId": "Authentication.GetAuthenticationToken",
        "tags": ["Authentication"],
        "parameters": [
          {
            "name": "remove",
            "description": "",
            "in": "path",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "account": {
                    "type": "string",
                    "description": "The account of user."
                  },
                  "password": {
                    "type": "string",
                    "description": "The password of user."
                  }
                },
                "required": ["account", "password"]
              },
              "example": {
                "account": "example@infodeck.io",
                "password": "**********"
              },
              "description": ""
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {},
                      "required": []
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "404": {
            "description": "The resource hasn't found."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": []
      }
    },
    "/organizations/{organizationId}/decks": {
      "post": {
        "summary": "Create Deck",
        "description": "Create Deck",
        "operationId": "Deck.CreateDeck",
        "tags": ["Deck"],
        "parameters": [
          {
            "name": "organizationId",
            "description": "The ID of organization.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "description": "The title of deck."
                  },
                  "description": {
                    "type": "string",
                    "description": "The description of deck."
                  },
                  "weight": {
                    "type": "number",
                    "description": "The weight of deck."
                  },
                  "widgets": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {},
                      "required": []
                    },
                    "description": "The widgets of deck."
                  }
                },
                "required": ["weight", "widgets"]
              },
              "example": {
                "title": "IDT-Deck",
                "description": "IDT-Deck-Description",
                "weight": "1",
                "widgets": [
                  {
                    "id": "1710000000000",
                    "configuration": {
                      "assetId": "a-assetId",
                      "modeKey": "default"
                    },
                    "description": "Display a device status",
                    "gridLayout": {
                      "h": 15,
                      "i": 1700000000000,
                      "w": 6,
                      "x": 6,
                      "y": 0
                    },
                    "title": "Data Combination",
                    "type": "UtdDc"
                  }
                ]
              },
              "description": ""
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {},
                      "required": []
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      },
      "get": {
        "summary": "List Decks",
        "description": "List Decks",
        "operationId": "Deck.ListDecks",
        "tags": ["Deck"],
        "parameters": [
          {
            "name": "organizationId",
            "description": "The ID of organization.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "maxResults",
            "description": "The maximum number of results to return.",
            "in": "query",
            "schema": {
              "type": "number",
              "minimum": 10,
              "maximum": 100
            },
            "required": false
          },
          {
            "name": "nextToken",
            "description": "To retrieve the next set of results.",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false
          }
        ],
        "requestBody": {},
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {},
                      "required": []
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      }
    },
    "/organizations/{organizationId}/decks/{deckId}": {
      "delete": {
        "summary": "Delete Deck",
        "description": "Delete Deck",
        "operationId": "Deck.DeleteDeck",
        "tags": ["Deck"],
        "parameters": [
          {
            "name": "organizationId",
            "description": "The ID of organization.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "deckId",
            "description": "The ID of deck.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {},
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {},
                      "required": []
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      },
      "get": {
        "summary": "Get Deck",
        "description": "Get Deck",
        "operationId": "Deck.GetDeck",
        "tags": ["Deck"],
        "parameters": [
          {
            "name": "organizationId",
            "description": "The ID of organization.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "deckId",
            "description": "The ID of deck.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {},
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {},
                      "required": []
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      },
      "put": {
        "summary": "Update Deck",
        "description": "Update Deck",
        "operationId": "Deck.UpdateDeck",
        "tags": ["Deck"],
        "parameters": [
          {
            "name": "organizationId",
            "description": "The ID of organization.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "deckId",
            "description": "The ID of deck.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "description": "The title of deck."
                  },
                  "description": {
                    "type": "string",
                    "description": "The description of deck."
                  },
                  "weight": {
                    "type": "number",
                    "description": "The weight of deck."
                  },
                  "widgets": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {},
                      "required": []
                    },
                    "description": "The widgets of deck."
                  }
                },
                "required": ["weight", "widgets"]
              },
              "example": {
                "title": "IDT-Deck",
                "description": "IDT-Deck-Description",
                "weight": "1",
                "widgets": [
                  {
                    "id": "1710000000000",
                    "configuration": {
                      "assetId": "a-assetId",
                      "modeKey": "default"
                    },
                    "description": "Display a device status",
                    "gridLayout": {
                      "h": 15,
                      "i": 1700000000000,
                      "w": 6,
                      "x": 6,
                      "y": 0
                    },
                    "title": "Data Combination",
                    "type": "UtdDc"
                  }
                ]
              },
              "description": ""
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {},
                      "required": []
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      }
    },
    "/organizations/{organizationId}/edge-gateways/{edgeGatewayId}/metrics/cpu-memory-usage": {
      "get": {
        "summary": "Get CPU & memory usage metric with edge gateway",
        "description": "Get CPU & memory usage metric with edge gateway",
        "operationId": "Edge_Gateways.GetCpuMemoryUsageMetricWithEdgeGateway",
        "tags": ["Edge Gateways"],
        "parameters": [
          {
            "name": "organizationId",
            "description": "The ID of organization.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "edgeGatewayId",
            "description": "Edge Gateway ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "period",
            "description": "Period of metric(unit: sec).",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "60",
                "300",
                "900",
                "3600",
                "86400",
                "604800",
                "2592000"
              ],
              "default": "300"
            },
            "required": false
          },
          {
            "name": "periodTime",
            "description": "Period time of metric(unit: sec).",
            "in": "query",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 129600,
              "default": 60
            },
            "required": false
          },
          {
            "name": "statistic",
            "description": "Statistic of metric.",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["Average", "Minimum", "Maximum"],
              "default": "Average"
            },
            "required": false
          }
        ],
        "requestBody": {},
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "cpuUsage": {
                          "type": "object",
                          "properties": {
                            "timestamps": {
                              "type": "array",
                              "items": {
                                "type": "number"
                              }
                            },
                            "values": {
                              "type": "array",
                              "items": {
                                "type": "number"
                              }
                            }
                          },
                          "required": ["timestamps", "values"]
                        },
                        "memoryUsage": {
                          "type": "object",
                          "properties": {
                            "timestamps": {
                              "type": "array",
                              "items": {
                                "type": "number"
                              }
                            },
                            "values": {
                              "type": "array",
                              "items": {
                                "type": "number"
                              }
                            }
                          },
                          "required": ["timestamps", "values"]
                        }
                      },
                      "required": ["cpuUsage", "memoryUsage"]
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      }
    },
    "/organizations/{organizationId}/edge-gateways/{edgeGatewayId}/metrics/disk-usage": {
      "get": {
        "summary": "Get disk usage metric with edge gateway",
        "description": "Get disk usage metric with edge gateway",
        "operationId": "Edge_Gateways.GetDiskUsageMetricWithEdgeGateway",
        "tags": ["Edge Gateways"],
        "parameters": [
          {
            "name": "organizationId",
            "description": "The ID of organization.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "edgeGatewayId",
            "description": "Edge Gateway ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {},
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "diskUsage": {
                          "type": "number"
                        }
                      },
                      "required": ["diskUsage"]
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      }
    },
    "/organizations/{organizationId}/edge-gateways/{thingName}/connectivity-info": {
      "get": {
        "summary": "Get Edge Gateway Connectivity Info",
        "description": "Get Edge Gateway Connectivity Info",
        "operationId": "Edge_Gateways.GetEdgeGatewayConnectivityInfo",
        "tags": ["Edge Gateways"],
        "parameters": [
          {
            "name": "organizationId",
            "description": "The ID of organization.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "edgeGatewayId",
            "description": "Edge Gateway ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {},
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "hostAddress": {
                          "type": "string"
                        },
                        "portNumber": {
                          "type": "string"
                        },
                        "metadata": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "id",
                        "hostAddress",
                        "portNumber",
                        "metadata"
                      ]
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      }
    },
    "/organizations/{organizationId}/edge-gateways/{edgeGatewayId}/installed-components": {
      "get": {
        "summary": "Get installed components in edge gateway",
        "description": "Get installed components in edge gateway",
        "operationId": "Edge_Gateways.GetInstalledComponentsInEdgeGateway",
        "tags": ["Edge Gateways"],
        "parameters": [
          {
            "name": "organizationId",
            "description": "The ID of organization.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "edgeGatewayId",
            "description": "Edge Gateway ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {},
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "componentName": {
                            "type": "string"
                          },
                          "componentVersion": {
                            "type": "string"
                          },
                          "isRoot": {
                            "type": "boolean"
                          },
                          "lastInstallationSource": {
                            "type": "string"
                          },
                          "lastReportedTimestamp": {},
                          "lastStatusChangeTimestamp": {},
                          "lifecycleState": {
                            "type": "string"
                          },
                          "lifecycleStateDetails": {
                            "type": "string"
                          },
                          "lifecycleStatusCodes": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        },
                        "required": [
                          "componentName",
                          "componentVersion",
                          "isRoot",
                          "lastInstallationSource",
                          "lastReportedTimestamp",
                          "lastStatusChangeTimestamp",
                          "lifecycleState",
                          "lifecycleStateDetails",
                          "lifecycleStatusCodes"
                        ]
                      }
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      }
    },
    "/organizations/{organizationId}/edge-gateways/{edgeGatewayId}/lorawan-devices": {
      "get": {
        "summary": "Get LoRaWAN devices in edge gateway",
        "description": "Get LoRaWAN Devices in edge gateway",
        "operationId": "Edge_Gateways.GetLoRaWANDevicesInEdgeGateway",
        "tags": ["Edge Gateways"],
        "parameters": [
          {
            "name": "organizationId",
            "description": "The ID of organization.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "edgeGatewayId",
            "description": "Edge Gateway ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "requireThingAttributes",
            "description": "Also fetch thing attributes.",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["true", "false"]
            },
            "required": false
          },
          {
            "name": "requireThingShadows",
            "description": "Also fetch thing shadows with shadow names.",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["true", "false"]
            },
            "required": false
          },
          {
            "name": "thingShadowNames",
            "description": "Specify shadow names to fetch. (Default: optional; Options: DeviceUplink, GatewayUplink)",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "required": false
          }
        ],
        "requestBody": {},
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "thingArn": {
                          "type": "string"
                        },
                        "thingId": {
                          "type": "string"
                        },
                        "thingName": {
                          "type": "string"
                        },
                        "thingTypeName": {
                          "type": "string"
                        },
                        "attributes": {
                          "type": "object",
                          "properties": {},
                          "required": []
                        },
                        "shadows": {
                          "type": "object",
                          "properties": {},
                          "required": []
                        }
                      },
                      "required": [
                        "thingArn",
                        "thingId",
                        "thingName",
                        "thingTypeName",
                        "attributes",
                        "shadows"
                      ]
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      }
    },
    "/organizations/{organizationId}/edge-gateways/{edgeGatewayId}/lorawan-gateways": {
      "get": {
        "summary": "Get LoRaWAN gateways in edge gateway",
        "description": "Get LoRaWAN Gateways in edge gateway",
        "operationId": "Edge_Gateways.GetLoRaWANGatewaysInEdgeGateway",
        "tags": ["Edge Gateways"],
        "parameters": [
          {
            "name": "organizationId",
            "description": "The ID of organization.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "edgeGatewayId",
            "description": "Edge Gateway ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "requireThingAttributes",
            "description": "Also fetch thing attributes.",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["true", "false"]
            },
            "required": false
          },
          {
            "name": "requireThingShadows",
            "description": "Also fetch thing shadows with shadow names.",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["true", "false"]
            },
            "required": false
          },
          {
            "name": "thingShadowNames",
            "description": "Specify shadow names to fetch. (Default: optional; Options: DeviceUplink, GatewayUplink)",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "required": false
          }
        ],
        "requestBody": {},
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "thingArn": {
                          "type": "string"
                        },
                        "thingId": {
                          "type": "string"
                        },
                        "thingName": {
                          "type": "string"
                        },
                        "thingTypeName": {
                          "type": "string"
                        },
                        "attributes": {
                          "type": "object",
                          "properties": {},
                          "required": []
                        },
                        "shadows": {
                          "type": "object",
                          "properties": {},
                          "required": []
                        }
                      },
                      "required": [
                        "thingArn",
                        "thingId",
                        "thingName",
                        "thingTypeName",
                        "attributes",
                        "shadows"
                      ]
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      }
    },
    "/organizations/{organizationId}/edge-gateways/{edgeGatewayId}/metrics/network": {
      "get": {
        "summary": "Get network metric with edge gateway",
        "description": "Get network metric with edge gateway",
        "operationId": "Edge_Gateways.GetNetworkMetricWithEdgeGateway",
        "tags": ["Edge Gateways"],
        "parameters": [
          {
            "name": "organizationId",
            "description": "The ID of organization.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "edgeGatewayId",
            "description": "Edge Gateway ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "period",
            "description": "Period of metric. (unit: sec)",
            "in": "query",
            "schema": {
              "type": "number",
              "enum": [
                "60",
                "300",
                "900",
                "3600",
                "86400",
                "604800",
                "2592000"
              ],
              "default": 300
            },
            "required": false
          },
          {
            "name": "periodTime",
            "description": "Period time of metric. (unit: sec)",
            "in": "query",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 129600,
              "default": 60
            },
            "required": false
          },
          {
            "name": "statistic",
            "description": "Statistic of metric.",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["Average", "Minimum", "Maximum"],
              "default": "Average"
            },
            "required": false
          }
        ],
        "requestBody": {},
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "pingMax": {
                          "type": "object",
                          "properties": {
                            "timestamps": {
                              "type": "array",
                              "items": {
                                "type": "number"
                              }
                            },
                            "values": {
                              "type": "array",
                              "items": {
                                "type": "number"
                              }
                            }
                          },
                          "required": ["timestamps", "values"]
                        },
                        "pingMin": {
                          "type": "object",
                          "properties": {
                            "timestamps": {
                              "type": "array",
                              "items": {
                                "type": "number"
                              }
                            },
                            "values": {
                              "type": "array",
                              "items": {
                                "type": "number"
                              }
                            }
                          },
                          "required": ["timestamps", "values"]
                        },
                        "pingAverage": {
                          "type": "object",
                          "properties": {
                            "timestamps": {
                              "type": "array",
                              "items": {
                                "type": "number"
                              }
                            },
                            "values": {
                              "type": "array",
                              "items": {
                                "type": "number"
                              }
                            }
                          },
                          "required": ["timestamps", "values"]
                        },
                        "pingMdev": {
                          "type": "object",
                          "properties": {
                            "timestamps": {
                              "type": "array",
                              "items": {
                                "type": "number"
                              }
                            },
                            "values": {
                              "type": "array",
                              "items": {
                                "type": "number"
                              }
                            }
                          },
                          "required": ["timestamps", "values"]
                        },
                        "pingTotalPackets": {
                          "type": "object",
                          "properties": {
                            "timestamps": {
                              "type": "array",
                              "items": {
                                "type": "number"
                              }
                            },
                            "values": {
                              "type": "array",
                              "items": {
                                "type": "number"
                              }
                            }
                          },
                          "required": ["timestamps", "values"]
                        },
                        "pingLossPackets": {
                          "type": "object",
                          "properties": {
                            "timestamps": {
                              "type": "array",
                              "items": {
                                "type": "number"
                              }
                            },
                            "values": {
                              "type": "array",
                              "items": {
                                "type": "number"
                              }
                            }
                          },
                          "required": ["timestamps", "values"]
                        }
                      },
                      "required": [
                        "pingMax",
                        "pingMin",
                        "pingAverage",
                        "pingMdev",
                        "pingTotalPackets",
                        "pingLossPackets"
                      ]
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      }
    },
    "/organizations/{organizationId}/edge-gateways/{edgeGatewayId}/metrics/temperature": {
      "get": {
        "summary": "Get CPU & power temperature metric with edge gateway",
        "description": "Get CPU & power temperature metric with edge gateway",
        "operationId": "Edge_Gateways.GetTemperatureMetricWithEdgeGateway",
        "tags": ["Edge Gateways"],
        "parameters": [
          {
            "name": "organizationId",
            "description": "The ID of organization.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "edgeGatewayId",
            "description": "Edge Gateway ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "period",
            "description": "Period of metric(unit: sec).",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "60",
                "300",
                "900",
                "3600",
                "86400",
                "604800",
                "2592000"
              ],
              "default": "300"
            },
            "required": false
          },
          {
            "name": "periodTime",
            "description": "Period time of metric(unit: sec).",
            "in": "query",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 129600,
              "default": 60
            },
            "required": false
          },
          {
            "name": "statistic",
            "description": "Statistic of metric",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["Average", "Minimum", "Maximum"]
            },
            "required": false
          }
        ],
        "requestBody": {},
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "cpuTemperature": {
                          "type": "object",
                          "properties": {
                            "timestamps": {
                              "type": "array",
                              "items": {
                                "type": "number"
                              }
                            },
                            "values": {
                              "type": "array",
                              "items": {
                                "type": "number"
                              }
                            }
                          },
                          "required": ["timestamps", "values"]
                        },
                        "powerTemperature": {
                          "type": "object",
                          "properties": {
                            "timestamps": {
                              "type": "array",
                              "items": {
                                "type": "number"
                              }
                            },
                            "values": {
                              "type": "array",
                              "items": {
                                "type": "number"
                              }
                            }
                          },
                          "required": ["timestamps", "values"]
                        }
                      },
                      "required": ["cpuTemperature", "powerTemperature"]
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      }
    },
    "/organizations/{organizationId}/edge-gateways": {
      "get": {
        "summary": "List edge gateways",
        "description": "List edge gateways",
        "operationId": "Edge_Gateways.ListEdgeGateways",
        "tags": ["Edge Gateways"],
        "parameters": [
          {
            "name": "organizationId",
            "description": "The ID of organization.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "maxResults",
            "description": "The maximum number of results to return.",
            "in": "query",
            "schema": {
              "type": "number",
              "minimum": 10,
              "maximum": 100
            },
            "required": false
          },
          {
            "name": "nextToken",
            "description": "To retrieve the next set of results.",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false
          }
        ],
        "requestBody": {},
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "coreDeviceThingName": {
                            "type": "string"
                          },
                          "status": {
                            "type": "string"
                          },
                          "lastStatusUpdateTimestamp": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "coreDeviceThingName",
                          "status",
                          "lastStatusUpdateTimestamp"
                        ]
                      }
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      }
    },
    "/organizations/{organizationId}/edge-gateways/{edgeGatewayId}/shadows/shadow-manager": {
      "put": {
        "summary": "Update Shadow Manager",
        "description": "Update Shadow Manager",
        "operationId": "Edge_Gateways.Update_Shadow_Manager",
        "tags": ["Edge Gateways"],
        "parameters": [
          {
            "name": "organizationId",
            "description": "The ID of organization.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "edgeGatewayId",
            "description": "Edge gateway device EUI",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {},
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "deploymentId": {
                            "type": "string"
                          },
                          "iotJobId": {
                            "type": "string"
                          },
                          "iotJobArn": {
                            "type": "string"
                          }
                        },
                        "required": ["deploymentId", "iotJobId", "iotJobArn"]
                      }
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      }
    },
    "/admin/organizations/{organizationId}/feedback": {
      "get": {
        "summary": "Admin Get Feedback",
        "description": "Admin Get Feedback",
        "operationId": "Feedback.AdminGetFeedback",
        "tags": ["Feedback"],
        "parameters": [
          {
            "name": "organizationId",
            "description": "The ID of organization.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {},
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "url": {
                          "type": "string"
                        }
                      },
                      "required": ["url"]
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "404": {
            "description": "The resource hasn't found."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      }
    },
    "/organizations/{organizationId}/resources/{resourceId}/feedback": {
      "get": {
        "summary": "Get Feedback Url",
        "description": "Get Feedback Url",
        "operationId": "Feedback.GetFeedbackUrl",
        "tags": ["Feedback"],
        "parameters": [
          {
            "name": "resourceId",
            "description": "The ID of resource.(a, l, sl, z)",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "organizationId",
            "description": "The ID of organization.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {},
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "url": {
                          "type": "string"
                        }
                      },
                      "required": ["url"]
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has invalid data."
          },
          "404": {
            "description": "The resource hasn't found."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": []
      }
    },
    "/organizations/{organizationId}/integrations/{serviceId}/devices": {
      "post": {
        "summary": "Create Integration Device",
        "description": "Create Integration Device",
        "operationId": "Integration.CreateIntegrationDevice",
        "tags": ["Integration"],
        "parameters": [
          {
            "name": "organizationId",
            "description": "The ID of organization.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "integrationServiceId",
            "description": "The ID of integration.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "devEui": {
                    "type": "string",
                    "description": "The devEui of integration device."
                  },
                  "name": {
                    "type": "string",
                    "description": "The name of integration device."
                  },
                  "description": {
                    "type": "string",
                    "description": "The description of device."
                  },
                  "assetTypeId": {
                    "type": "string",
                    "description": "The ID of asset type."
                  },
                  "locationId": {
                    "type": "string",
                    "description": "The ID of location."
                  },
                  "attributes": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {},
                      "required": []
                    },
                    "description": "The custom attributes of device."
                  }
                },
                "required": [
                  "devEui",
                  "name",
                  "assetTypeId",
                  "locationId",
                  "attributes"
                ]
              },
              "example": {
                "devEui": "24e124535b312345",
                "name": "IDT-BoT",
                "description": "IDT-BoT-Description",
                "assetTypeId": "a-assetTypeId",
                "locationId": "l-locationId",
                "attributes": ["Test-A", "Test-B", "Test-C"]
              },
              "description": ""
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {},
                      "required": []
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      },
      "get": {
        "summary": "List Integration devices",
        "description": "List Integration Devices",
        "operationId": "Integration.ListIntegrationDevices",
        "tags": ["Integration"],
        "parameters": [
          {
            "name": "organizationId",
            "description": "The ID of organization.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "integrationServiceId",
            "description": "The ID of integration service.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "maxResults",
            "description": "The maximum number of results to return.",
            "in": "query",
            "schema": {
              "type": "number",
              "minimum": 10,
              "maximum": 25
            },
            "required": false
          },
          {
            "name": "nextToken",
            "description": "To retrieve the next set of results.",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false
          }
        ],
        "requestBody": {},
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {},
                      "required": []
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      }
    },
    "/organizations/{organizationId}/integrations": {
      "post": {
        "summary": "Create Integration Service",
        "description": "Create Integration Service",
        "operationId": "Integration.CreateIntegrationService",
        "tags": ["Integration"],
        "parameters": [
          {
            "name": "organizationId",
            "description": "The ID of organization.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of integration."
                  },
                  "description": {
                    "type": "string",
                    "description": "The description of integration."
                  },
                  "type": {
                    "type": "string",
                    "description": "The type of integration."
                  }
                },
                "required": ["name", "type"]
              },
              "example": {
                "name": "IDT-Service",
                "description": "IDT-Servcie-Description",
                "type": "InfodeckLNS"
              },
              "description": ""
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {},
                      "required": []
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      },
      "get": {
        "summary": "List Integration Services",
        "description": "List Integration Services",
        "operationId": "Integration.ListIntegrationServices",
        "tags": ["Integration"],
        "parameters": [
          {
            "name": "organizationId",
            "description": "The ID of organization.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "maxResults",
            "description": "The maximum number of results to return.",
            "in": "query",
            "schema": {
              "type": "number",
              "minimum": 10,
              "maximum": 100
            },
            "required": false
          },
          {
            "name": "nextToken",
            "description": "To retrieve the next set of results.",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false
          }
        ],
        "requestBody": {},
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {},
                      "required": []
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      }
    },
    "/organizations/{organizationId}/integrations/{serviceId}": {
      "delete": {
        "summary": "Delete Integration Service",
        "description": "Delete Integration Service",
        "operationId": "Integration.DeleteIntegrationService",
        "tags": ["Integration"],
        "parameters": [
          {
            "name": "organizationId",
            "description": "The ID of organization.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "serviceId",
            "description": "The ID of integration.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {},
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {},
                      "required": []
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      },
      "get": {
        "summary": "Get Integration Service",
        "description": "Get Integration Service",
        "operationId": "Integration.GetIntegrationService",
        "tags": ["Integration"],
        "parameters": [
          {
            "name": "organizationId",
            "description": "The ID of organization.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "serviceId",
            "description": "The ID of integration.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {},
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {},
                      "required": []
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      },
      "put": {
        "summary": "Update Integration Service",
        "description": "Update Integration Service",
        "operationId": "Integration.UpdateIntegrationService",
        "tags": ["Integration"],
        "parameters": [
          {
            "name": "organizationId",
            "description": "The ID of organization.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "serviceId",
            "description": "The ID of integration.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of integration."
                  },
                  "description": {
                    "type": "string",
                    "description": "The description of integration."
                  },
                  "config": {
                    "type": "object",
                    "properties": {},
                    "required": [],
                    "description": "The configuration of integration."
                  }
                },
                "required": ["name"]
              },
              "example": {
                "name": "IDT-Service",
                "description": "IDT-Servcie-Description",
                "config": {
                  "apiKey": "eyJ0xxxxxxxxxxxxxxxxxxxxxx4",
                  "host": "abc-edf-ghi.infodeck.io"
                }
              },
              "description": ""
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {},
                      "required": []
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      }
    },
    "/integrations/chirpstack-v4": {
      "post": {
        "summary": "Forward ChirpstackV4 Hook",
        "description": "Forward ChirpstackV4 Hook",
        "operationId": "Integration.ForwardChirpstackV4Hook",
        "tags": ["Integration"],
        "parameters": [
          {
            "name": "remove",
            "description": "",
            "in": "path",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "event",
            "description": "The event to forward.",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["up"]
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "deduplicationId": {
                    "type": "string",
                    "description": "The ID used for deduplication."
                  },
                  "time": {
                    "type": "string",
                    "description": "The time of the payload in ISO 8601 format."
                  },
                  "deviceInfo": {
                    "type": "object",
                    "properties": {
                      "tenantId": {
                        "type": "string"
                      },
                      "tenantName": {
                        "type": "string"
                      },
                      "applicationId": {
                        "type": "string"
                      },
                      "applicationName": {
                        "type": "string"
                      },
                      "deviceProfileId": {
                        "type": "string"
                      },
                      "deviceProfileName": {
                        "type": "string"
                      },
                      "deviceName": {
                        "type": "string"
                      },
                      "devEui": {
                        "type": "string"
                      },
                      "deviceClassEnabled": {
                        "type": "string"
                      },
                      "tags": {
                        "type": "object",
                        "properties": {},
                        "required": []
                      }
                    },
                    "required": [
                      "tenantId",
                      "tenantName",
                      "applicationId",
                      "applicationName",
                      "deviceProfileId",
                      "deviceProfileName",
                      "deviceName",
                      "devEui",
                      "deviceClassEnabled",
                      "tags"
                    ],
                    "description": "Information about the IoT device."
                  },
                  "devAddr": {
                    "type": "string",
                    "description": "The device address."
                  },
                  "adr": {
                    "type": "boolean",
                    "description": "Flag indicating if Adaptive Data Rate (ADR) is enabled."
                  },
                  "dr": {
                    "type": "number",
                    "description": "The data rate used by the device."
                  },
                  "fCnt": {
                    "type": "number",
                    "description": "The frame counter."
                  },
                  "fPort": {
                    "type": "number",
                    "description": "The FPort number."
                  },
                  "confirmed": {
                    "type": "boolean",
                    "description": "Flag indicating if the transmission was confirmed."
                  },
                  "data": {
                    "type": "string",
                    "description": "The payload data."
                  },
                  "rxInfo": {
                    "description": "Information about the received packet."
                  },
                  "rxInfo[]": {
                    "type": "string",
                    "description": ".crcStatus                     The status of the CRC check."
                  },
                  "txInfo": {
                    "type": "object",
                    "properties": {
                      "frequency": {
                        "type": "number"
                      },
                      "modulation": {
                        "type": "object",
                        "properties": {
                          "lora": {
                            "type": "object",
                            "properties": {
                              "bandwidth": {
                                "type": "number"
                              },
                              "spreadingFactor": {
                                "type": "number"
                              },
                              "codeRate": {
                                "type": "string"
                              }
                            },
                            "required": [
                              "bandwidth",
                              "spreadingFactor",
                              "codeRate"
                            ]
                          }
                        },
                        "required": ["lora"]
                      }
                    },
                    "required": ["frequency", "modulation"],
                    "description": "Information about the transmitted packet."
                  }
                },
                "required": [
                  "deduplicationId",
                  "time",
                  "deviceInfo",
                  "devAddr",
                  "adr",
                  "dr",
                  "fCnt",
                  "fPort",
                  "confirmed",
                  "data",
                  "rxInfo",
                  "rxInfo[]",
                  "rxInfo[]",
                  "rxInfo[]",
                  "rxInfo[]",
                  "rxInfo[]",
                  "rxInfo[]",
                  "rxInfo[]",
                  "rxInfo[]",
                  "rxInfo[]",
                  "rxInfo[]",
                  "txInfo"
                ]
              },
              "example": {
                "deduplicationId": "0447f96f-xxxx-xxxx-xxxx-d886df897a41",
                "time": "2024-01-01T12:00:00.000+00:00",
                "deviceInfo": {
                  "tenantId": "52f14cd4-xxxx-xxxx-xxxx-4025e1d49242",
                  "tenantName": "ChirpStack",
                  "applicationId": "8d757a70-xxxx-xxxx-xxxx-a178bc6edf12",
                  "applicationName": "Development",
                  "deviceProfileId": "78a84f5c-xxxx-xxxx-xxxx-1de32826eca9",
                  "deviceProfileName": "NS330-SBC",
                  "deviceName": "NS330-SBC",
                  "devEui": "24e124535b312345",
                  "deviceClassEnabled": "CLASS_C",
                  "tags": {}
                },
                "devAddr": "0036e085",
                "adr": true,
                "dr": 5,
                "fCnt": 113,
                "fPort": 85,
                "confirmed": true,
                "data": "/y4B",
                "rxInfo": [
                  {
                    "gatewayId": "24e124fffef12345",
                    "uplinkId": 534054989,
                    "time": "2023-07-18T10:28:32.267788+00:00",
                    "timeSinceGpsEpoch": "1373711330.267s",
                    "rssi": -55,
                    "snr": 13.5,
                    "location": {},
                    "context": "j0J2SA==",
                    "metadata": {
                      "region_config_id": "as923",
                      "region_common_name": "AS923"
                    },
                    "crcStatus": "CRC_OK"
                  }
                ],
                "txInfo": {
                  "frequency": 923200000,
                  "modulation": {
                    "lora": {
                      "bandwidth": 125000,
                      "spreadingFactor": 7,
                      "codeRate": "CR_4_5"
                    }
                  }
                }
              },
              "description": ""
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "forwarded": {
                      "type": "boolean"
                    }
                  },
                  "required": ["forwarded"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      }
    },
    "/integrations/infodeck-lns": {
      "post": {
        "summary": "Forward InfodeckLNS Hook",
        "description": "Forward InfodeckLNS Hook",
        "operationId": "Integration.ForwardInfodeckLNSHook",
        "tags": ["Integration"],
        "parameters": [
          {
            "name": "remove",
            "description": "",
            "in": "path",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "event",
            "description": "The event to forward.",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["up"]
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "deduplicationId": {
                    "type": "string",
                    "description": "The ID used for deduplication."
                  },
                  "time": {
                    "type": "string",
                    "description": "The time of the payload in ISO 8601 format."
                  },
                  "deviceInfo": {
                    "type": "object",
                    "properties": {
                      "tenantId": {
                        "type": "string"
                      },
                      "tenantName": {
                        "type": "string"
                      },
                      "applicationId": {
                        "type": "string"
                      },
                      "applicationName": {
                        "type": "string"
                      },
                      "deviceProfileId": {
                        "type": "string"
                      },
                      "deviceProfileName": {
                        "type": "string"
                      },
                      "deviceName": {
                        "type": "string"
                      },
                      "devEui": {
                        "type": "string"
                      },
                      "deviceClassEnabled": {
                        "type": "string"
                      },
                      "tags": {
                        "type": "object",
                        "properties": {},
                        "required": []
                      }
                    },
                    "required": [
                      "tenantId",
                      "tenantName",
                      "applicationId",
                      "applicationName",
                      "deviceProfileId",
                      "deviceProfileName",
                      "deviceName",
                      "devEui",
                      "deviceClassEnabled",
                      "tags"
                    ],
                    "description": "Information about the IoT device."
                  },
                  "devAddr": {
                    "type": "string",
                    "description": "The device address."
                  },
                  "adr": {
                    "type": "boolean",
                    "description": "Flag indicating if Adaptive Data Rate (ADR) is enabled."
                  },
                  "dr": {
                    "type": "number",
                    "description": "The data rate used by the device."
                  },
                  "fCnt": {
                    "type": "number",
                    "description": "The frame counter."
                  },
                  "fPort": {
                    "type": "number",
                    "description": "The FPort number."
                  },
                  "confirmed": {
                    "type": "boolean",
                    "description": "Flag indicating if the transmission was confirmed."
                  },
                  "data": {
                    "type": "string",
                    "description": "The payload data."
                  },
                  "rxInfo": {
                    "description": "Information about the received packet."
                  },
                  "rxInfo[]": {
                    "type": "string",
                    "description": ".crcStatus                     The status of the CRC check."
                  },
                  "txInfo": {
                    "type": "object",
                    "properties": {
                      "frequency": {
                        "type": "number"
                      },
                      "modulation": {
                        "type": "object",
                        "properties": {
                          "lora": {
                            "type": "object",
                            "properties": {
                              "bandwidth": {
                                "type": "number"
                              },
                              "spreadingFactor": {
                                "type": "number"
                              },
                              "codeRate": {
                                "type": "string"
                              }
                            },
                            "required": [
                              "bandwidth",
                              "spreadingFactor",
                              "codeRate"
                            ]
                          }
                        },
                        "required": ["lora"]
                      }
                    },
                    "required": ["frequency", "modulation"],
                    "description": "Information about the transmitted packet."
                  }
                },
                "required": [
                  "deduplicationId",
                  "time",
                  "deviceInfo",
                  "devAddr",
                  "adr",
                  "dr",
                  "fCnt",
                  "fPort",
                  "confirmed",
                  "data",
                  "rxInfo",
                  "rxInfo[]",
                  "rxInfo[]",
                  "rxInfo[]",
                  "rxInfo[]",
                  "rxInfo[]",
                  "rxInfo[]",
                  "rxInfo[]",
                  "rxInfo[]",
                  "rxInfo[]",
                  "rxInfo[]",
                  "txInfo"
                ]
              },
              "example": {
                "deduplicationId": "0447f96f-xxxx-xxxx-xxxx-d886df897a41",
                "time": "2024-01-01T12:00:00.000+00:00",
                "deviceInfo": {
                  "tenantId": "52f14cd4-xxxx-xxxx-xxxx-4025e1d49242",
                  "tenantName": "InfodeckLNS",
                  "applicationId": "8d757a70-xxxx-xxxx-xxxx-a178bc6edf12",
                  "applicationName": "Development",
                  "deviceProfileId": "78a84f5c-xxxx-xxxx-xxxx-1de32826eca9",
                  "deviceProfileName": "NS330-SBC",
                  "deviceName": "NS330-SBC",
                  "devEui": "24e124535b312345",
                  "deviceClassEnabled": "CLASS_C",
                  "tags": {}
                },
                "devAddr": "0036e085",
                "adr": true,
                "dr": 5,
                "fCnt": 113,
                "fPort": 85,
                "confirmed": true,
                "data": "/y4B",
                "rxInfo": [
                  {
                    "gatewayId": "24e124fffef12345",
                    "uplinkId": 534054989,
                    "time": "2023-07-18T10:28:32.267788+00:00",
                    "timeSinceGpsEpoch": "1373711330.267s",
                    "rssi": -55,
                    "snr": 13.5,
                    "location": {},
                    "context": "j0J2SA==",
                    "metadata": {
                      "region_config_id": "as923",
                      "region_common_name": "AS923"
                    },
                    "crcStatus": "CRC_OK"
                  }
                ],
                "txInfo": {
                  "frequency": 923200000,
                  "modulation": {
                    "lora": {
                      "bandwidth": 125000,
                      "spreadingFactor": 7,
                      "codeRate": "CR_4_5"
                    }
                  }
                }
              },
              "description": ""
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "forwarded": {
                      "type": "boolean"
                    }
                  },
                  "required": ["forwarded"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      }
    },
    "/integrations/loriot": {
      "post": {
        "summary": "Forward Loriot Hook",
        "description": "Forward Loriot Hook",
        "operationId": "Integration.ForwardLoriotHook",
        "tags": ["Integration"],
        "parameters": [
          {
            "name": "remove",
            "description": "",
            "in": "path",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "cmd": {
                    "type": "string",
                    "description": "The cmd of IoT device."
                  },
                  "seqno": {
                    "type": "string",
                    "description": "The sequence number of uplink message."
                  },
                  "EUI": {
                    "type": "string",
                    "description": "The EUI of IoT device."
                  },
                  "ts": {
                    "type": "string",
                    "description": "The timestamp of uplink message."
                  },
                  "fcnt": {
                    "type": "string",
                    "description": "The frame counter of uplink message."
                  },
                  "port": {
                    "type": "string",
                    "description": "The port of uplink message."
                  },
                  "freq": {
                    "type": "string",
                    "description": "The frequency of uplink message."
                  },
                  "toa": {
                    "type": "string",
                    "description": "The time on air of uplink message."
                  },
                  "dr": {
                    "type": "string",
                    "description": "The data rate of uplink message."
                  },
                  "ack": {
                    "type": "boolean",
                    "description": "The ACK bit of uplink message."
                  },
                  "gws": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "gweui": {
                          "type": "string"
                        },
                        "rssi": {
                          "type": "number"
                        },
                        "snr": {
                          "type": "number"
                        },
                        "ant": {
                          "type": "number"
                        },
                        "lat": {
                          "type": "number"
                        },
                        "lon": {
                          "type": "number"
                        },
                        "time": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "gweui",
                        "rssi",
                        "snr",
                        "ant",
                        "lat",
                        "lon",
                        "time"
                      ]
                    },
                    "description": "The gateways that received the uplink message."
                  },
                  "bat": {
                    "type": "string",
                    "description": "The battery level of the IoT device."
                  },
                  "data": {
                    "type": "string",
                    "description": "The payload of the uplink message."
                  }
                },
                "required": [
                  "cmd",
                  "seqno",
                  "EUI",
                  "ts",
                  "fcnt",
                  "port",
                  "freq",
                  "toa",
                  "dr",
                  "ack",
                  "gws",
                  "bat",
                  "data"
                ]
              },
              "example": {
                "cmd": "gw",
                "seqno": 4,
                "EUI": "24E124141B267890",
                "ts": 1688114678797,
                "fcnt": 4,
                "port": 85,
                "freq": 923800000,
                "toa": 371,
                "dr": "SF10 BW125 4/5",
                "ack": false,
                "gws": [
                  {
                    "rssi": -87,
                    "snr": 12.2,
                    "ts": 1688114678797,
                    "time": "2023-06-30T08:44:38.797Z",
                    "gweui": "24E124FFFFF12345",
                    "ant": 0,
                    "lat": 25.0520483,
                    "lon": 121.5462282
                  }
                ],
                "bat": 2,
                "data": "017501030001040001"
              },
              "description": ""
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "forwarded": {
                      "type": "boolean"
                    }
                  },
                  "required": ["forwarded"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      }
    },
    "/organizations/{organizationId}/integrations/{serviceId}/devices/{deviceId}": {
      "get": {
        "summary": "Get Integration device",
        "description": "Get Integration Device",
        "operationId": "Integration.GetIntegrationDevice",
        "tags": ["Integration"],
        "parameters": [
          {
            "name": "organizationId",
            "description": "The ID of organization.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "integrationServiceId",
            "description": "The ID of integration.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "deviceId",
            "description": "The ID of integration device.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {},
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {},
                      "required": []
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      },
      "delete": {
        "summary": "Unlink Integration Device",
        "description": "Unlink Integration Device",
        "operationId": "Integration.UnlinkIntegrationDevice",
        "tags": ["Integration"],
        "parameters": [
          {
            "name": "organizationId",
            "description": "The ID of organization.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "integrationServiceId",
            "description": "The ID of integration.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "deviceId",
            "description": "The ID of integration device.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {},
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {},
                      "required": []
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      },
      "put": {
        "summary": "Update Integration Device",
        "description": "Update Integration Device",
        "operationId": "Integration.UpdateIntegrationDevice",
        "tags": ["Integration"],
        "parameters": [
          {
            "name": "organizationId",
            "description": "The ID of organization.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "integrationServiceId",
            "description": "The ID of integration.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "deviceId",
            "description": "The ID of integration device.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "devEui": {
                    "type": "string",
                    "description": "The devEui of integration device."
                  },
                  "name": {
                    "type": "string",
                    "description": "The name of integration device."
                  },
                  "description": {
                    "type": "string",
                    "description": "The description of integration."
                  },
                  "attributes": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {},
                      "required": []
                    },
                    "description": "The custom attributes of device"
                  }
                },
                "required": ["devEui", "name"]
              },
              "example": {
                "devEui": "24e124535b312345",
                "name": "IDT-BoT",
                "description": "IDT-BoT-Description",
                "attributes": ["Test-A", "Test-B", "Test-C"]
              },
              "description": ""
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {},
                      "required": []
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      }
    },
    "/lns/tenants/{tenantId}/applications": {
      "post": {
        "summary": "Create Application",
        "description": "Create application",
        "operationId": "LNS_Application.CreateApplication",
        "tags": ["LNS Application"],
        "parameters": [
          {
            "name": "tenantId",
            "description": "The ID of tenant.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of application."
                  },
                  "description": {
                    "type": "string",
                    "description": "The description of application."
                  }
                },
                "required": ["name"]
              },
              "example": {
                "name": "IDT-Application",
                "description": "IDT-Application-Description"
              },
              "description": ""
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "tenantId": {
                          "type": "string"
                        },
                        "id": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        }
                      },
                      "required": ["tenantId", "id", "name", "description"]
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "404": {
            "description": "The resource hasn't found."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      },
      "get": {
        "summary": "List Applications",
        "description": "List applications",
        "operationId": "LNS_Application.ListApplications",
        "tags": ["LNS Application"],
        "parameters": [
          {
            "name": "tenantId",
            "description": "The ID of tenant.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "description": "The offset of application.",
            "in": "query",
            "schema": {
              "type": "number",
              "minimum": 0,
              "default": 0
            },
            "required": false
          },
          {
            "name": "limit",
            "description": "The limit of application.",
            "in": "query",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 20
            },
            "required": false
          }
        ],
        "requestBody": {},
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "name": {
                            "type": "string"
                          },
                          "description": {
                            "type": "string"
                          },
                          "createdAt": {
                            "type": "number"
                          },
                          "updatedAt": {
                            "type": "number"
                          }
                        },
                        "required": [
                          "id",
                          "name",
                          "description",
                          "createdAt",
                          "updatedAt"
                        ]
                      }
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "404": {
            "description": "The resource hasn't found."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      }
    },
    "/lns/tenants/{tenantId}/applications/{applicationId}": {
      "delete": {
        "summary": "Delete Application",
        "description": "Delete application",
        "operationId": "LNS_Application.DeleteApplication",
        "tags": ["LNS Application"],
        "parameters": [
          {
            "name": "tenantId",
            "description": "The ID of tenant.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "applicationId",
            "description": "The ID of application.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {},
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {},
                      "required": []
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "404": {
            "description": "The resource hasn't found."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      },
      "get": {
        "summary": "Get Application",
        "description": "Get application",
        "operationId": "LNS_Application.GetApplication",
        "tags": ["LNS Application"],
        "parameters": [
          {
            "name": "tenantId",
            "description": "The ID of tenant.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "applicationId",
            "description": "The ID of application.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {},
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "tenantId": {
                          "type": "string"
                        },
                        "id": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "createdAt": {
                          "type": "number"
                        },
                        "updatedAt": {
                          "type": "number"
                        }
                      },
                      "required": [
                        "tenantId",
                        "id",
                        "name",
                        "description",
                        "createdAt",
                        "updatedAt"
                      ]
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "404": {
            "description": "The resource hasn't found."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      },
      "put": {
        "summary": "Update Application",
        "description": "Update application",
        "operationId": "LNS_Application.UpdateApplication",
        "tags": ["LNS Application"],
        "parameters": [
          {
            "name": "tenantId",
            "description": "The ID of tenant.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "applicationId",
            "description": "The ID of application.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of application."
                  },
                  "description": {
                    "type": "string",
                    "description": "The description of application."
                  }
                },
                "required": ["name"]
              },
              "example": {
                "name": "IDT-Application",
                "description": "IDT-Application-Description"
              },
              "description": ""
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "tenantId": {
                          "type": "string"
                        },
                        "id": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        }
                      },
                      "required": ["tenantId", "id", "name", "description"]
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "404": {
            "description": "The resource hasn't found."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      }
    },
    "/lns/tenants/{tenantId}/applications/{applicationId}/integration": {
      "get": {
        "summary": "Get Http Integration",
        "description": "Get http integration",
        "operationId": "LNS_Application.GetHttpIntegration",
        "tags": ["LNS Application"],
        "parameters": [
          {
            "name": "tenantId",
            "description": "The ID of tenant.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "applicationId",
            "description": "The ID of application.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {},
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "tenantId": {
                          "type": "string"
                        },
                        "id": {
                          "type": "string"
                        },
                        "headersMap": {
                          "type": "string"
                        },
                        "encoding": {
                          "type": "string"
                        },
                        "eventEndpointUrl": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "tenantId",
                        "id",
                        "headersMap",
                        "encoding",
                        "eventEndpointUrl"
                      ]
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "404": {
            "description": "The resource hasn't found."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      }
    },
    "/lns/tenants/{tenantId}/applications/{applicationId}/devices": {
      "post": {
        "summary": "Create Device",
        "description": "Create device",
        "operationId": "LNS_Device.CreateDevice",
        "tags": ["LNS Device"],
        "parameters": [
          {
            "name": "tenantId",
            "description": "The ID of tenant.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "applicationId",
            "description": "The ID of application.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of device."
                  },
                  "description": {
                    "type": "string",
                    "description": "The description of device."
                  },
                  "devEui": {
                    "type": "string",
                    "description": "The ID of device."
                  },
                  "joinEui": {
                    "type": "string",
                    "description": "The ID of joinEui."
                  },
                  "deviceProfileId": {
                    "type": "string",
                    "description": "The ID of deviceProfile."
                  },
                  "isDisabled": {
                    "type": "boolean",
                    "description": "The isDisabled of device."
                  },
                  "skipFcntCheck": {
                    "type": "boolean",
                    "description": "The skipFcntCheck of device."
                  },
                  "tagsMap": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {},
                      "required": []
                    },
                    "description": "The tagsMsp of device."
                  },
                  "variablesMap": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {},
                      "required": []
                    },
                    "description": "The variablesMap of device."
                  }
                },
                "required": ["name", "devEui", "deviceProfileId"]
              },
              "example": {
                "name": "IDT-Device",
                "description": "IDT-Device-Description",
                "devEui": "24e124535b312345",
                "joinEui": "24e124c0002abcde",
                "deviceProfileId": "f1b1f383-xxxx-xxxx-xxxx-b656250d225b",
                "isDisabled": false,
                "skipFcntCheck": false,
                "tagsMap": [
                  {
                    "key": "Rooftop",
                    "value": "Weather monitoring"
                  }
                ],
                "variablesMap": [
                  {
                    "key": "version",
                    "value": "1.0.2"
                  }
                ]
              },
              "description": ""
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "tenantId": {
                          "type": "string"
                        },
                        "applicationId": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "devEui": {
                          "type": "string"
                        },
                        "joinEui": {
                          "type": "string"
                        },
                        "deviceProfileId": {
                          "type": "string"
                        },
                        "isDisabled": {
                          "type": "boolean"
                        },
                        "skipFcntCheck": {
                          "type": "boolean"
                        },
                        "tagsMap": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {},
                            "required": []
                          }
                        },
                        "variablesMap": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {},
                            "required": []
                          }
                        }
                      },
                      "required": [
                        "tenantId",
                        "applicationId",
                        "name",
                        "description",
                        "devEui",
                        "joinEui",
                        "deviceProfileId",
                        "isDisabled",
                        "skipFcntCheck",
                        "tagsMap",
                        "variablesMap"
                      ]
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "404": {
            "description": "The resource hasn't found."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      },
      "get": {
        "summary": "List Devices",
        "description": "List devices",
        "operationId": "LNS_Device.ListDevices",
        "tags": ["LNS Device"],
        "parameters": [
          {
            "name": "tenantId",
            "description": "The ID of tenant.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "applicationId",
            "description": "The ID of application.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "description": "The offset of device.",
            "in": "query",
            "schema": {
              "type": "number",
              "minimum": 0,
              "default": 0
            },
            "required": false
          },
          {
            "name": "limit",
            "description": "The limit of device.",
            "in": "query",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 20
            },
            "required": false
          }
        ],
        "requestBody": {},
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string"
                          },
                          "description": {
                            "type": "string"
                          },
                          "devEui": {
                            "type": "string"
                          },
                          "deviceProfileId": {
                            "type": "string"
                          },
                          "deviceProfileName": {
                            "type": "string"
                          },
                          "deviceStatus": {
                            "type": "object",
                            "properties": {},
                            "required": []
                          },
                          "lastSeenAt": {
                            "type": "number"
                          },
                          "createdAt": {
                            "type": "number"
                          },
                          "updatedAt": {
                            "type": "number"
                          }
                        },
                        "required": [
                          "name",
                          "description",
                          "devEui",
                          "deviceProfileId",
                          "deviceProfileName",
                          "deviceStatus",
                          "lastSeenAt",
                          "createdAt",
                          "updatedAt"
                        ]
                      }
                    },
                    "totalCount": {
                      "type": "number"
                    }
                  },
                  "required": ["data", "totalCount"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "404": {
            "description": "The resource hasn't found."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      }
    },
    "/lns/tenants/{tenantId}/applications/{applicationId}/devices/deviceId/activations": {
      "post": {
        "summary": "Create Device Activation",
        "description": "Create device activation",
        "operationId": "LNS_Device.CreateDeviceActivation",
        "tags": ["LNS Device"],
        "parameters": [
          {
            "name": "tenantId",
            "description": "The ID of tenant.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "applicationId",
            "description": "The ID of application.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "devEui": {
                    "type": "string",
                    "description": "The ID of device."
                  },
                  "devAddr": {
                    "type": "string",
                    "description": "The devAddr of device activation."
                  },
                  "appSKey": {
                    "type": "string",
                    "description": "The appSKey of device activation."
                  },
                  "nwkSEncKey": {
                    "type": "string",
                    "description": "The nwkSEncKey of device activation."
                  },
                  "sNwkSIntKey": {
                    "type": "string",
                    "description": "The sNwkSIntKey of device activation."
                  },
                  "fNwkSIntKey": {
                    "type": "string",
                    "description": "The fNwkSIntKey of device activation."
                  },
                  "fCntUp": {
                    "type": "number",
                    "description": "The fCntUp of device activation."
                  },
                  "nFCntDown": {
                    "type": "number",
                    "description": "The nFCntDown of device activation."
                  },
                  "aFCntDown": {
                    "type": "number",
                    "description": "The aFCntDown of device activation."
                  }
                },
                "required": ["devEui"]
              },
              "example": {
                "devEui": "24e124535b318262",
                "devAddr": "0036e085",
                "appSKey": "98b81xxxxxxxxxxxxxxxxxxxxxxxxxxe",
                "nwkSEncKey": "be8dexxxxxxxxxxxxxxxxxxxxxxxxxxe",
                "sNwkSIntKey": "be8dexxxxxxxxxxxxxxxxxxxxxxxxxxe",
                "fNwkSIntKey": "be8dexxxxxxxxxxxxxxxxxxxxxxxxxxe",
                "fCntUp": 0,
                "nFCntDown": 0,
                "aFCntDown": 0
              },
              "description": ""
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {},
                      "required": []
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "404": {
            "description": "The resource hasn't found."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      },
      "delete": {
        "summary": "Delete Device Activation",
        "description": "Delete device activation",
        "operationId": "LNS_Device.DeleteDeviceActivation",
        "tags": ["LNS Device"],
        "parameters": [
          {
            "name": "tenantId",
            "description": "The ID of tenant.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "applicationId",
            "description": "The ID of application.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {},
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {},
                      "required": []
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "404": {
            "description": "The resource hasn't found."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      },
      "get": {
        "summary": "Get Device Activation",
        "description": "Get device activation",
        "operationId": "LNS_Device.GetDeviceActivation",
        "tags": ["LNS Device"],
        "parameters": [
          {
            "name": "tenantId",
            "description": "The ID of tenant.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "applicationId",
            "description": "The ID of application.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {},
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "applicationId": {
                          "type": "string"
                        },
                        "devEui": {
                          "type": "string"
                        },
                        "devAddr": {
                          "type": "string"
                        },
                        "appSKey": {
                          "type": "string"
                        },
                        "nwkSEncKey": {
                          "type": "string"
                        },
                        "sNwkSIntKey": {
                          "type": "string"
                        },
                        "fNwkSIntKey": {
                          "type": "string"
                        },
                        "fCntUp": {
                          "type": "number"
                        },
                        "nFCntDown": {
                          "type": "number"
                        },
                        "aFCntDown": {
                          "type": "number"
                        }
                      },
                      "required": [
                        "applicationId",
                        "devEui",
                        "devAddr",
                        "appSKey",
                        "nwkSEncKey",
                        "sNwkSIntKey",
                        "fNwkSIntKey",
                        "fCntUp",
                        "nFCntDown",
                        "aFCntDown"
                      ]
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "404": {
            "description": "The resource hasn't found."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      }
    },
    "/lns/tenants/{tenantId}/applications/{applicationId}/devices/{deviceId}": {
      "delete": {
        "summary": "Delete Device",
        "description": "Delete device",
        "operationId": "LNS_Device.DeleteDevice",
        "tags": ["LNS Device"],
        "parameters": [
          {
            "name": "tenantId",
            "description": "The ID of tenant.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "applicationId",
            "description": "The ID of application.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {},
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {},
                      "required": []
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "404": {
            "description": "The resource hasn't found."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      },
      "put": {
        "summary": "Update Device",
        "description": "Update device",
        "operationId": "LNS_Device.UpdateDevice",
        "tags": ["LNS Device"],
        "parameters": [
          {
            "name": "tenantId",
            "description": "The ID of tenant.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "applicationId",
            "description": "The ID of application.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of device."
                  },
                  "description": {
                    "type": "string",
                    "description": "The description of device."
                  },
                  "devEui": {
                    "type": "string",
                    "description": "The ID of device."
                  },
                  "joinEui": {
                    "type": "string",
                    "description": "The ID of joinEui."
                  },
                  "deviceProfileId": {
                    "type": "string",
                    "description": "The ID of deviceProfile."
                  },
                  "isDisabled": {
                    "type": "boolean",
                    "description": "The isDisabled of device."
                  },
                  "skipFcntCheck": {
                    "type": "boolean",
                    "description": "The skipFcntCheck of device."
                  },
                  "tagsMap": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {},
                      "required": []
                    },
                    "description": "The tagsMsp of device."
                  },
                  "variablesMap": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {},
                      "required": []
                    },
                    "description": "The variablesMap of device."
                  }
                },
                "required": ["name", "devEui", "deviceProfileId"]
              },
              "example": {
                "name": "IDT-Device",
                "description": "IDT-Device-Description",
                "devEui": "24e124535b312345",
                "joinEui": "24e124c0002abcde",
                "deviceProfileId": "f1b1f383-xxxx-xxxx-xxxx-b656250d225b",
                "isDisabled": false,
                "skipFcntCheck": false,
                "tagsMap": [
                  {
                    "key": "Rooftop",
                    "value": "Weather monitoring"
                  }
                ],
                "variablesMap": [
                  {
                    "key": "version",
                    "value": "1.0.2"
                  }
                ]
              },
              "description": ""
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "devEui": {
                          "type": "string"
                        },
                        "joinEui": {
                          "type": "string"
                        },
                        "deviceProfileId": {
                          "type": "string"
                        },
                        "isDisabled": {
                          "type": "boolean"
                        },
                        "skipFcntCheck": {
                          "type": "boolean"
                        },
                        "tagsMap": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {},
                            "required": []
                          }
                        },
                        "variablesMap": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {},
                            "required": []
                          }
                        }
                      },
                      "required": [
                        "name",
                        "description",
                        "devEui",
                        "joinEui",
                        "deviceProfileId",
                        "isDisabled",
                        "skipFcntCheck",
                        "tagsMap",
                        "variablesMap"
                      ]
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "404": {
            "description": "The resource hasn't found."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      }
    },
    "/lns/tenants/{tenantId}/applications/{applicationId}/devices/deviceId/queues": {
      "post": {
        "summary": "Enqueue Device Queue Item",
        "description": "Enqueue device queue item",
        "operationId": "LNS_Device.EnqueueDeviceQueueItem",
        "tags": ["LNS Device"],
        "parameters": [
          {
            "name": "tenantId",
            "description": "The ID of tenant.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "applicationId",
            "description": "The ID of application.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "deviceId",
            "description": "The ID of device.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "The ID of device queue."
                  },
                  "confirmed": {
                    "type": "boolean",
                    "description": "The confirmed of device queue."
                  },
                  "fPort": {
                    "type": "number",
                    "description": "The fPort of device queue."
                  },
                  "fCntDown": {
                    "type": "number",
                    "description": "The fCntDown of device queue."
                  },
                  "data": {
                    "type": "string",
                    "description": "The data of device queue."
                  },
                  "object": {
                    "type": "object",
                    "properties": {},
                    "required": [],
                    "description": "The object of device queue."
                  },
                  "isPending": {
                    "type": "boolean",
                    "description": "The isPending of device queue."
                  }
                },
                "required": []
              },
              "example": {
                "id": "e61d84ba-xxxx-xxxx-xxxx-776da69aaa13",
                "devEui": "24e124535b312345",
                "confirmed": false,
                "isPending": false,
                "object": {
                  "codec": "exampleCodec"
                },
                "fCntDown": 0,
                "fPort": 85
              },
              "description": ""
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "applicationId": {
                            "type": "string"
                          },
                          "devEui": {
                            "type": "string"
                          },
                          "id": {
                            "type": "string"
                          },
                          "confirmed": {
                            "type": "boolean"
                          },
                          "fPort": {
                            "type": "number"
                          },
                          "data": {
                            "type": "string"
                          },
                          "isPending": {
                            "type": "boolean"
                          },
                          "fCntDown": {
                            "type": "number"
                          }
                        },
                        "required": [
                          "applicationId",
                          "devEui",
                          "id",
                          "confirmed",
                          "fPort",
                          "data",
                          "isPending",
                          "fCntDown"
                        ]
                      }
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "404": {
            "description": "The resource hasn't found."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      },
      "get": {
        "summary": "Get Device Queue Items",
        "description": "Get device queue items",
        "operationId": "LNS_Device.GetDeviceQueueItems",
        "tags": ["LNS Device"],
        "parameters": [
          {
            "name": "tenantId",
            "description": "The ID of tenant.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "applicationId",
            "description": "The ID of application.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "deviceId",
            "description": "The ID of device.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "countOnly",
            "description": "The countOnly of device.",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["true", "false"],
              "default": "false"
            },
            "required": false
          }
        ],
        "requestBody": {},
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "applicationId": {
                            "type": "string"
                          },
                          "devEui": {
                            "type": "string"
                          },
                          "id": {
                            "type": "string"
                          },
                          "confirmed": {
                            "type": "boolean"
                          },
                          "fPort": {
                            "type": "number"
                          },
                          "data": {
                            "type": "string"
                          },
                          "isPending": {
                            "type": "boolean"
                          },
                          "fCntDown": {
                            "type": "number"
                          }
                        },
                        "required": [
                          "applicationId",
                          "devEui",
                          "id",
                          "confirmed",
                          "fPort",
                          "data",
                          "isPending",
                          "fCntDown"
                        ]
                      }
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "404": {
            "description": "The resource hasn't found."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      }
    },
    "/lns/tenants/{tenantId}/applications/{applicationId}/devices/{deviceId}/nonces": {
      "delete": {
        "summary": "Flush Device Nonces",
        "description": "Flush device nonces",
        "operationId": "LNS_Device.FlushDeviceNonces",
        "tags": ["LNS Device"],
        "parameters": [
          {
            "name": "tenantId",
            "description": "The ID of tenant.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "applicationId",
            "description": "The ID of application.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {},
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {},
                      "required": []
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "404": {
            "description": "The resource hasn't found."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      }
    },
    "/lns/tenants/{tenantId}/applications/{applicationId}/devices/{deviceId}/queues": {
      "delete": {
        "summary": "Flush Device queues",
        "description": "Flush device queues",
        "operationId": "LNS_Device.FlushDeviceQueues",
        "tags": ["LNS Device"],
        "parameters": [
          {
            "name": "tenantId",
            "description": "The ID of tenant.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "applicationId",
            "description": "The ID of application.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {},
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {},
                      "required": []
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "404": {
            "description": "The resource hasn't found."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      }
    },
    "/lns/tenants/{tenantId}/applications/{applicationId}/devices/deviceId": {
      "get": {
        "summary": "Get Device",
        "description": "Get device",
        "operationId": "LNS_Device.GetDevice",
        "tags": ["LNS Device"],
        "parameters": [
          {
            "name": "tenantId",
            "description": "The ID of tenant.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "applicationId",
            "description": "The ID of application.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "devEui",
            "description": "The ID of device.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {},
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "applicationId": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "devEui": {
                          "type": "string"
                        },
                        "joinEui": {
                          "type": "string"
                        },
                        "deviceProfileId": {
                          "type": "string"
                        },
                        "isDisabled": {
                          "type": "boolean"
                        },
                        "skipFcntCheck": {
                          "type": "boolean"
                        },
                        "deviceStatus": {
                          "type": "object",
                          "properties": {},
                          "required": []
                        },
                        "lastSeenAt": {
                          "type": "number"
                        },
                        "tagsMap": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {},
                            "required": []
                          }
                        },
                        "variablesMap": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {},
                            "required": []
                          }
                        },
                        "createdAt": {
                          "type": "number"
                        },
                        "updatedAt": {
                          "type": "number"
                        }
                      },
                      "required": [
                        "applicationId",
                        "name",
                        "description",
                        "devEui",
                        "joinEui",
                        "deviceProfileId",
                        "isDisabled",
                        "skipFcntCheck",
                        "deviceStatus",
                        "lastSeenAt",
                        "tagsMap",
                        "variablesMap",
                        "createdAt",
                        "updatedAt"
                      ]
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "404": {
            "description": "The resource hasn't found."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      }
    },
    "/lns/tenants/{tenantId}/applications/{applicationId}/devices/{deviceId}/keys": {
      "get": {
        "summary": "Get Device Keys",
        "description": "Get device keys",
        "operationId": "LNS_Device.GetDeviceKeys",
        "tags": ["LNS Device"],
        "parameters": [
          {
            "name": "tenantId",
            "description": "The ID of tenant.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "applicationId",
            "description": "The ID of application.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {},
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "appkey": {
                          "type": "string"
                        }
                      },
                      "required": ["appkey"]
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "404": {
            "description": "The resource hasn't found."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      },
      "put": {
        "summary": "Update Device Keys",
        "description": "Update device keys",
        "operationId": "LNS_Device.UpdateDeviceKeys",
        "tags": ["LNS Device"],
        "parameters": [
          {
            "name": "tenantId",
            "description": "The ID of tenant.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "applicationId",
            "description": "The ID of application.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "appKey": {
                    "type": "string",
                    "description": "The app key of device."
                  },
                  "nwkKey": {
                    "type": "string",
                    "description": "The network key of device."
                  }
                },
                "required": ["appKey"]
              },
              "example": {
                "devEui": "24e124535b318262",
                "appKey": "55724xxxxxxxxxxxxxxxxxxxxxxxxxx3"
              },
              "description": ""
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "appkey": {
                          "type": "string"
                        },
                        "nwkKey": {
                          "type": "string"
                        }
                      },
                      "required": ["appkey", "nwkKey"]
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "404": {
            "description": "The resource hasn't found."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      }
    },
    "/lns/tenants/{tenantId}/applications/{applicationId}/devices/all": {
      "get": {
        "summary": "Get Devices",
        "description": "Get devices",
        "operationId": "LNS_Device.GetDevices",
        "tags": ["LNS Device"],
        "parameters": [
          {
            "name": "tenantId",
            "description": "The ID of tenant.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "applicationId",
            "description": "The ID of application.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "devEui",
            "description": "The ID of device.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "description": "The offset of device.",
            "in": "query",
            "schema": {
              "type": "number",
              "minimum": 0,
              "default": 0
            },
            "required": false
          },
          {
            "name": "limit",
            "description": "The limit of device.",
            "in": "query",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 20
            },
            "required": false
          }
        ],
        "requestBody": {},
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "devEui": {
                            "type": "string"
                          },
                          "lastSeenAt": {
                            "type": "number"
                          },
                          "activateStatus": {
                            "type": "boolean"
                          }
                        },
                        "required": ["devEui", "lastSeenAt", "activateStatus"]
                      }
                    },
                    "totalCount": {
                      "type": "number"
                    }
                  },
                  "required": ["data", "totalCount"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "404": {
            "description": "The resource hasn't found."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      }
    },
    "/lns/tenants/{tenantId}/device-profiles": {
      "post": {
        "summary": "Create Device Profile",
        "description": "Create device profile",
        "operationId": "LNS_Device_Profile.CreateDeviceProfile",
        "tags": ["LNS Device Profile"],
        "parameters": [
          {
            "name": "tenantId",
            "description": "The ID of tenant.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of device profile."
                  },
                  "description": {
                    "type": "string",
                    "description": "The description of device profile."
                  },
                  "region": {
                    "type": "number",
                    "description": "The region of device profile."
                  },
                  "macVersion": {
                    "type": "number",
                    "description": "The mac version of device profile."
                  },
                  "regionConfigId": {
                    "type": "string",
                    "description": "The region config ID of device profile."
                  },
                  "regParamsRevision": {
                    "type": "number",
                    "description": "The reg params revision of device profile."
                  },
                  "adrAlgorithmId": {
                    "type": "string",
                    "description": "The ADR algorithm ID of device profile."
                  },
                  "flushQueueOnActivate": {
                    "type": "boolean",
                    "description": "The flush queue on activate of device profile."
                  },
                  "uplinkInterval": {
                    "type": "number",
                    "description": "The uplink interval of device profile."
                  },
                  "deviceStatusReqInterval": {
                    "type": "number",
                    "description": "The device status request interval of device profile."
                  },
                  "supportsOtaa": {
                    "type": "boolean",
                    "description": "The supports OTAA of device profile."
                  },
                  "abpRx1Delay": {
                    "type": "number",
                    "description": "The ABP Rx1 delay of device profile."
                  },
                  "abpRx1DrOffset": {
                    "type": "number",
                    "description": "The ABP Rx1 DR offset of device profile."
                  },
                  "abpRx2Dr": {
                    "type": "number",
                    "description": "The ABP Rx2 DR of device profile."
                  },
                  "abpRx2Freq": {
                    "type": "number",
                    "description": "The ABP Rx2 frequency of device profile."
                  },
                  "supportsClassB": {
                    "type": "boolean",
                    "description": "The supports Class B of device profile."
                  },
                  "classBTimeout": {
                    "type": "number",
                    "description": "The Class B timeout of device profile."
                  },
                  "classBPingSlotNbK": {
                    "type": "number",
                    "description": "The Class B ping slot number of device profile."
                  },
                  "classBPingSlotDr": {
                    "type": "number",
                    "description": "The Class B ping slot DR of device profile."
                  },
                  "classBPingSlotFreq": {
                    "type": "number",
                    "description": "The Class B ping slot frequency of device profile."
                  },
                  "supportsClassC": {
                    "type": "boolean",
                    "description": "The supports Class C of device profile."
                  },
                  "classCTimeout": {
                    "type": "number",
                    "description": "The Class C timeout of device profile."
                  },
                  "isRelay": {
                    "type": "boolean",
                    "description": "The is relay of device profile."
                  },
                  "relayEnabled": {
                    "type": "boolean",
                    "description": "The relay enabled of device profile."
                  },
                  "relayDefaultChannelIndex": {
                    "type": "number",
                    "description": "The relay default channel index of device profile."
                  },
                  "relaySecondChannelFreq": {
                    "type": "number",
                    "description": "The relay second channel frequency of device profile."
                  },
                  "relaySecondChannelDr": {
                    "type": "number",
                    "description": "The relay second channel DR of device profile."
                  },
                  "relaySecondChannelAckOffset": {
                    "type": "number",
                    "description": "The relay second channel ack offset of device profile."
                  },
                  "relayCadPeriodicity": {
                    "type": "number",
                    "description": "The relay cad periodicity of device profile."
                  },
                  "relayJoinReqLimitBucketSize": {
                    "type": "number",
                    "description": "The relay join request limit bucket size of device profile."
                  },
                  "relayJoinReqLimitReloadRate": {
                    "type": "number",
                    "description": "The relay join request limit reload rate of device profile."
                  },
                  "relayNotifyLimitBucketSize": {
                    "type": "number",
                    "description": "The relay notify limit bucket size of device profile."
                  },
                  "relayNotifyLimitReloadRate": {
                    "type": "number",
                    "description": "The relay notify limit reload rate of device profile."
                  },
                  "relayGlobalUplinkLimitBucketSize": {
                    "type": "number",
                    "description": "The relay overall limit bucket size of device profile."
                  },
                  "relayGlobalUplinkLimitReloadRate": {
                    "type": "number",
                    "description": "The relay overall limit reload rate of device profile."
                  },
                  "relayOverallLimitBucketSize": {
                    "type": "number",
                    "description": "The relay overall limit bucket size of device profile."
                  },
                  "relayOverallLimitReloadRate": {
                    "type": "number",
                    "description": "The relay overall limit reload rate of device profile."
                  },
                  "isRelayEd": {
                    "type": "boolean",
                    "description": "The is relay ED of device profile."
                  },
                  "relayEdRelayOnly": {
                    "type": "boolean",
                    "description": "The relay ED relay only of device profile."
                  },
                  "relayEdActivationMode": {
                    "type": "number",
                    "description": "The relay ED activation mode of device profile."
                  },
                  "relayEdSmartEnableLevel": {
                    "type": "number",
                    "description": "The relay ED smart enable level of device profile."
                  },
                  "relayEdBackOff": {
                    "type": "number",
                    "description": "The relay ED back off of device profile."
                  },
                  "relayEdUplinkLimitBucketSize": {
                    "type": "number",
                    "description": "The relay ED uplink limit bucket size of device profile."
                  },
                  "relayEdUplinkLimitReloadRate": {
                    "type": "number",
                    "description": "The relay ED uplink limit reload rate of device profile."
                  }
                },
                "required": [
                  "name",
                  "region",
                  "macVersion",
                  "regParamsRevision",
                  "adrAlgorithmId",
                  "uplinkInterval"
                ]
              },
              "example": {
                "tenantId": "b004ebe0-xxxx-xxxx-xxxx-dacd251b6f00",
                "id": "ff7684e4-xxxx-xxxx-xxxx-6f42763591d1",
                "name": "AS923-ClassC",
                "description": "",
                "region": 7,
                "macVersion": 3,
                "regionConfigId": "as923",
                "regParamsRevision": 0,
                "adrAlgorithmId": "default",
                "flushQueueOnActivate": true,
                "uplinkInterval": 3600,
                "deviceStatusReqInterval": 30,
                "supportsOtaa": true,
                "abpRx1Delay": 0,
                "abpRx1DrOffset": 0,
                "abpRx2Dr": 0,
                "abpRx2Freq": 0,
                "supportsClassB": false,
                "classBTimeout": 0,
                "classBPingSlotNbK": 0,
                "classBPingSlotDr": 0,
                "classBPingSlotFreq": 0,
                "supportsClassC": true,
                "classCTimeout": 0,
                "isRelay": false,
                "relayEnabled": false,
                "relayDefaultChannelIndex": 0,
                "relaySecondChannelFreq": 0,
                "relaySecondChannelDr": 0,
                "relaySecondChannelAckOffset": 0,
                "relayCadPeriodicity": 0,
                "relayJoinReqLimitBucketSize": 0,
                "relayJoinReqLimitReloadRate": 0,
                "relayNotifyLimitBucketSize": 0,
                "relayNotifyLimitReloadRate": 0,
                "relayGlobalUplinkLimitBucketSize": 0,
                "relayGlobalUplinkLimitReloadRate": 0,
                "relayOverallLimitBucketSize": 0,
                "relayOverallLimitReloadRate": 0,
                "isRelayEd": false,
                "relayEdRelayOnly": false,
                "relayEdActivationMode": 0,
                "relayEdSmartEnableLevel": 0,
                "relayEdBackOff": 0,
                "relayEdUplinkLimitBucketSize": 0,
                "relayEdUplinkLimitReloadRate": 0,
                "tagsMap": [
                  {
                    "key": "Rooftop",
                    "value": "Weather monitoring"
                  }
                ]
              },
              "description": ""
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "tenantId": {
                            "type": "string"
                          },
                          "id": {
                            "type": "string"
                          },
                          "name": {
                            "type": "string"
                          },
                          "description": {
                            "type": "string"
                          },
                          "region": {
                            "type": "number"
                          },
                          "regionConfigId": {
                            "type": "string"
                          },
                          "macVersion": {
                            "type": "number"
                          },
                          "regParamsRevision": {
                            "type": "number"
                          },
                          "adrAlgorithmId": {
                            "type": "string"
                          },
                          "flushQueueOnActivate": {
                            "type": "boolean"
                          },
                          "uplinkInterval": {
                            "type": "boolean"
                          },
                          "deviceStatusReqInterval": {
                            "type": "number"
                          },
                          "supportsOtaa": {
                            "type": "boolean"
                          },
                          "abpRx1Delay": {
                            "type": "number"
                          },
                          "abpRx1DrOffset": {
                            "type": "number"
                          },
                          "abpRx2Dr": {
                            "type": "number"
                          },
                          "abpRx2Freq": {
                            "type": "number"
                          },
                          "supportsClassB": {
                            "type": "boolean"
                          },
                          "classBTimeout": {
                            "type": "number"
                          },
                          "classBPingSlotNbK": {
                            "type": "number"
                          },
                          "classBPingSlotDr": {
                            "type": "number"
                          },
                          "classBPingSlotFreq": {
                            "type": "number"
                          },
                          "supportsClassC": {
                            "type": "boolean"
                          },
                          "classCTimeout": {
                            "type": "number"
                          },
                          "isRelay": {
                            "type": "boolean"
                          },
                          "relayEnabled": {
                            "type": "boolean"
                          },
                          "relayDefaultChannelIndex": {
                            "type": "number"
                          },
                          "relaySecondChannelFreq": {
                            "type": "number"
                          },
                          "relaySecondChannelDr": {
                            "type": "number"
                          },
                          "relaySecondChannelAckOffset": {
                            "type": "number"
                          },
                          "relayCadPeriodicity": {
                            "type": "number"
                          },
                          "relayJoinReqLimitBucketSize": {
                            "type": "number"
                          },
                          "relayJoinReqLimitReloadRate": {
                            "type": "number"
                          },
                          "relayNotifyLimitBucketSize": {
                            "type": "number"
                          },
                          "relayNotifyLimitReloadRate": {
                            "type": "number"
                          },
                          "relayGlobalUplinkLimitBucketSize": {
                            "type": "number"
                          },
                          "relayGlobalUplinkLimitReloadRate": {
                            "type": "number"
                          },
                          "relayOverallLimitBucketSize": {
                            "type": "number"
                          },
                          "relayOverallLimitReloadRate": {
                            "type": "number"
                          },
                          "isRelayEd": {
                            "type": "boolean"
                          },
                          "relayEdRelayOnly": {
                            "type": "boolean"
                          },
                          "relayEdActivationMode": {
                            "type": "number"
                          },
                          "relayEdSmartEnableLevel": {
                            "type": "number"
                          },
                          "relayEdBackOff": {
                            "type": "number"
                          },
                          "relayEdUplinkLimitBucketSize": {
                            "type": "number"
                          },
                          "relayEdUplinkLimitReloadRate": {
                            "type": "number"
                          },
                          "tagsMap": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {},
                              "required": []
                            }
                          }
                        },
                        "required": [
                          "tenantId",
                          "id",
                          "name",
                          "description",
                          "region",
                          "regionConfigId",
                          "macVersion",
                          "regParamsRevision",
                          "adrAlgorithmId",
                          "flushQueueOnActivate",
                          "uplinkInterval",
                          "deviceStatusReqInterval",
                          "supportsOtaa",
                          "abpRx1Delay",
                          "abpRx1DrOffset",
                          "abpRx2Dr",
                          "abpRx2Freq",
                          "supportsClassB",
                          "classBTimeout",
                          "classBPingSlotNbK",
                          "classBPingSlotDr",
                          "classBPingSlotFreq",
                          "supportsClassC",
                          "classCTimeout",
                          "isRelay",
                          "relayEnabled",
                          "relayDefaultChannelIndex",
                          "relaySecondChannelFreq",
                          "relaySecondChannelDr",
                          "relaySecondChannelAckOffset",
                          "relayCadPeriodicity",
                          "relayJoinReqLimitBucketSize",
                          "relayJoinReqLimitReloadRate",
                          "relayNotifyLimitBucketSize",
                          "relayNotifyLimitReloadRate",
                          "relayGlobalUplinkLimitBucketSize",
                          "relayGlobalUplinkLimitReloadRate",
                          "relayOverallLimitBucketSize",
                          "relayOverallLimitReloadRate",
                          "isRelayEd",
                          "relayEdRelayOnly",
                          "relayEdActivationMode",
                          "relayEdSmartEnableLevel",
                          "relayEdBackOff",
                          "relayEdUplinkLimitBucketSize",
                          "relayEdUplinkLimitReloadRate",
                          "tagsMap"
                        ]
                      }
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "404": {
            "description": "The resource hasn't found."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      },
      "get": {
        "summary": "List Device Profiles",
        "description": "List device profiles",
        "operationId": "LNS_Device_Profile.ListDeviceProfiles",
        "tags": ["LNS Device Profile"],
        "parameters": [
          {
            "name": "tenantId",
            "description": "The ID of tenant.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "description": "The offset of device profile.",
            "in": "query",
            "schema": {
              "type": "number",
              "minimum": 0,
              "default": 0
            },
            "required": false
          },
          {
            "name": "limit",
            "description": "The limit of device profile.",
            "in": "query",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 20
            },
            "required": false
          }
        ],
        "requestBody": {},
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "name": {
                            "type": "string"
                          },
                          "region": {
                            "type": "number"
                          },
                          "macVersion": {
                            "type": "number"
                          },
                          "regParamsRevision": {
                            "type": "number"
                          },
                          "supportsOtaa": {
                            "type": "boolean"
                          },
                          "supportsClassB": {
                            "type": "boolean"
                          },
                          "supportsClassC": {
                            "type": "boolean"
                          },
                          "createdAt": {
                            "type": "number"
                          },
                          "updatedAt": {
                            "type": "number"
                          }
                        },
                        "required": [
                          "id",
                          "name",
                          "region",
                          "macVersion",
                          "regParamsRevision",
                          "supportsOtaa",
                          "supportsClassB",
                          "supportsClassC",
                          "createdAt",
                          "updatedAt"
                        ]
                      }
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "404": {
            "description": "The resource hasn't found."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      }
    },
    "/lns/tenants/{tenantId}/device-profiles/{deviceProfileId}": {
      "delete": {
        "summary": "Delete Device Profile",
        "description": "Delete device profile",
        "operationId": "LNS_Device_Profile.DeleteDeviceProfile",
        "tags": ["LNS Device Profile"],
        "parameters": [
          {
            "name": "tenantId",
            "description": "The ID of tenant.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "deviceProfileId",
            "description": "The ID of device profile.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {},
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {},
                      "required": []
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "404": {
            "description": "The resource hasn't found."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      },
      "get": {
        "summary": "Get Device Profile",
        "description": "Get device profile",
        "operationId": "LNS_Device_Profile.GetDeviceProfile",
        "tags": ["LNS Device Profile"],
        "parameters": [
          {
            "name": "tenantId",
            "description": "The ID of tenant.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "deviceProfileId",
            "description": "The ID of device profile.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {},
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "tenantId": {
                            "type": "string"
                          },
                          "name": {
                            "type": "string"
                          },
                          "description": {
                            "type": "string"
                          },
                          "region": {
                            "type": "number"
                          },
                          "regionConfigId": {
                            "type": "string"
                          },
                          "macVersion": {
                            "type": "number"
                          },
                          "regParamsRevision": {
                            "type": "number"
                          },
                          "adrAlgorithmId": {
                            "type": "string"
                          },
                          "flushQueueOnActivate": {
                            "type": "boolean"
                          },
                          "uplinkInterval": {
                            "type": "boolean"
                          },
                          "deviceStatusReqInterval": {
                            "type": "number"
                          },
                          "supportsOtaa": {
                            "type": "boolean"
                          },
                          "abpRx1Delay": {
                            "type": "number"
                          },
                          "abpRx1DrOffset": {
                            "type": "number"
                          },
                          "abpRx2Dr": {
                            "type": "number"
                          },
                          "abpRx2Freq": {
                            "type": "number"
                          },
                          "supportsClassB": {
                            "type": "boolean"
                          },
                          "classBTimeout": {
                            "type": "number"
                          },
                          "classBPingSlotNbK": {
                            "type": "number"
                          },
                          "classBPingSlotDr": {
                            "type": "number"
                          },
                          "classBPingSlotFreq": {
                            "type": "number"
                          },
                          "supportsClassC": {
                            "type": "boolean"
                          },
                          "classCTimeout": {
                            "type": "number"
                          },
                          "isRelay": {
                            "type": "boolean"
                          },
                          "relayEnabled": {
                            "type": "boolean"
                          },
                          "relayDefaultChannelIndex": {
                            "type": "number"
                          },
                          "relaySecondChannelFreq": {
                            "type": "number"
                          },
                          "relaySecondChannelDr": {
                            "type": "number"
                          },
                          "relaySecondChannelAckOffset": {
                            "type": "number"
                          },
                          "relayCadPeriodicity": {
                            "type": "number"
                          },
                          "relayJoinReqLimitBucketSize": {
                            "type": "number"
                          },
                          "relayJoinReqLimitReloadRate": {
                            "type": "number"
                          },
                          "relayNotifyLimitBucketSize": {
                            "type": "number"
                          },
                          "relayNotifyLimitReloadRate": {
                            "type": "number"
                          },
                          "relayGlobalUplinkLimitBucketSize": {
                            "type": "number"
                          },
                          "relayGlobalUplinkLimitReloadRate": {
                            "type": "number"
                          },
                          "relayOverallLimitBucketSize": {
                            "type": "number"
                          },
                          "relayOverallLimitReloadRate": {
                            "type": "number"
                          },
                          "isRelayEd": {
                            "type": "boolean"
                          },
                          "relayEdRelayOnly": {
                            "type": "boolean"
                          },
                          "relayEdActivationMode": {
                            "type": "number"
                          },
                          "relayEdSmartEnableLevel": {
                            "type": "number"
                          },
                          "relayEdBackOff": {
                            "type": "number"
                          },
                          "relayEdUplinkLimitBucketSize": {
                            "type": "number"
                          },
                          "relayEdUplinkLimitReloadRate": {
                            "type": "number"
                          },
                          "tagsMap": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {},
                              "required": []
                            }
                          },
                          "createdAt": {
                            "type": "number"
                          },
                          "updatedAt": {
                            "type": "number"
                          }
                        },
                        "required": [
                          "id",
                          "tenantId",
                          "name",
                          "description",
                          "region",
                          "regionConfigId",
                          "macVersion",
                          "regParamsRevision",
                          "adrAlgorithmId",
                          "flushQueueOnActivate",
                          "uplinkInterval",
                          "deviceStatusReqInterval",
                          "supportsOtaa",
                          "abpRx1Delay",
                          "abpRx1DrOffset",
                          "abpRx2Dr",
                          "abpRx2Freq",
                          "supportsClassB",
                          "classBTimeout",
                          "classBPingSlotNbK",
                          "classBPingSlotDr",
                          "classBPingSlotFreq",
                          "supportsClassC",
                          "classCTimeout",
                          "isRelay",
                          "relayEnabled",
                          "relayDefaultChannelIndex",
                          "relaySecondChannelFreq",
                          "relaySecondChannelDr",
                          "relaySecondChannelAckOffset",
                          "relayCadPeriodicity",
                          "relayJoinReqLimitBucketSize",
                          "relayJoinReqLimitReloadRate",
                          "relayNotifyLimitBucketSize",
                          "relayNotifyLimitReloadRate",
                          "relayGlobalUplinkLimitBucketSize",
                          "relayGlobalUplinkLimitReloadRate",
                          "relayOverallLimitBucketSize",
                          "relayOverallLimitReloadRate",
                          "isRelayEd",
                          "relayEdRelayOnly",
                          "relayEdActivationMode",
                          "relayEdSmartEnableLevel",
                          "relayEdBackOff",
                          "relayEdUplinkLimitBucketSize",
                          "relayEdUplinkLimitReloadRate",
                          "tagsMap",
                          "createdAt",
                          "updatedAt"
                        ]
                      }
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "404": {
            "description": "The resource hasn't found."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      },
      "put": {
        "summary": "Update Device Profile",
        "description": "Update device profile",
        "operationId": "LNS_Device_Profile.UpdateDeviceProfile",
        "tags": ["LNS Device Profile"],
        "parameters": [
          {
            "name": "tenantId",
            "description": "The ID of tenant.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "deviceProfileId",
            "description": "The ID of device profile.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of device profile."
                  },
                  "description": {
                    "type": "string",
                    "description": "The description of device profile."
                  },
                  "region": {
                    "type": "number",
                    "description": "The region of device profile."
                  },
                  "macVersion": {
                    "type": "number",
                    "description": "The mac version of device profile."
                  },
                  "regionConfigId": {
                    "type": "string",
                    "description": "The region config ID of device profile."
                  },
                  "regParamsRevision": {
                    "type": "number",
                    "description": "The reg params revision of device profile."
                  },
                  "adrAlgorithmId": {
                    "type": "string",
                    "description": "The ADR algorithm ID of device profile."
                  },
                  "flushQueueOnActivate": {
                    "type": "boolean",
                    "description": "The flush queue on activate of device profile."
                  },
                  "uplinkInterval": {
                    "type": "number",
                    "description": "The uplink interval of device profile."
                  },
                  "deviceStatusReqInterval": {
                    "type": "number",
                    "description": "The device status request interval of device profile."
                  },
                  "supportsOtaa": {
                    "type": "boolean",
                    "description": "The supports OTAA of device profile."
                  },
                  "abpRx1Delay": {
                    "type": "number",
                    "description": "The ABP Rx1 delay of device profile."
                  },
                  "abpRx1DrOffset": {
                    "type": "number",
                    "description": "The ABP Rx1 DR offset of device profile."
                  },
                  "abpRx2Dr": {
                    "type": "number",
                    "description": "The ABP Rx2 DR of device profile."
                  },
                  "abpRx2Freq": {
                    "type": "number",
                    "description": "The ABP Rx2 frequency of device profile."
                  },
                  "supportsClassB": {
                    "type": "boolean",
                    "description": "The supports Class B of device profile."
                  },
                  "classBTimeout": {
                    "type": "number",
                    "description": "The Class B timeout of device profile."
                  },
                  "classBPingSlotNbK": {
                    "type": "number",
                    "description": "The Class B ping slot number of device profile."
                  },
                  "classBPingSlotDr": {
                    "type": "number",
                    "description": "The Class B ping slot DR of device profile."
                  },
                  "classBPingSlotFreq": {
                    "type": "number",
                    "description": "The Class B ping slot frequency of device profile."
                  },
                  "supportsClassC": {
                    "type": "boolean",
                    "description": "The supports Class C of device profile."
                  },
                  "classCTimeout": {
                    "type": "number",
                    "description": "The Class C timeout of device profile."
                  },
                  "isRelay": {
                    "type": "boolean",
                    "description": "The is relay of device profile."
                  },
                  "relayEnabled": {
                    "type": "boolean",
                    "description": "The relay enabled of device profile."
                  },
                  "relayDefaultChannelIndex": {
                    "type": "number",
                    "description": "The relay default channel index of device profile."
                  },
                  "relaySecondChannelFreq": {
                    "type": "number",
                    "description": "The relay second channel frequency of device profile."
                  },
                  "relaySecondChannelDr": {
                    "type": "number",
                    "description": "The relay second channel DR of device profile."
                  },
                  "relaySecondChannelAckOffset": {
                    "type": "number",
                    "description": "The relay second channel ack offset of device profile."
                  },
                  "relayCadPeriodicity": {
                    "type": "number",
                    "description": "The relay cad periodicity of device profile."
                  },
                  "relayJoinReqLimitBucketSize": {
                    "type": "number",
                    "description": "The relay join request limit bucket size of device profile."
                  },
                  "relayJoinReqLimitReloadRate": {
                    "type": "number",
                    "description": "The relay join request limit reload rate of device profile."
                  },
                  "relayNotifyLimitBucketSize": {
                    "type": "number",
                    "description": "The relay notify limit bucket size of device profile."
                  },
                  "relayNotifyLimitReloadRate": {
                    "type": "number",
                    "description": "The relay notify limit reload rate of device profile."
                  },
                  "relayGlobalUplinkLimitBucketSize": {
                    "type": "number",
                    "description": "The relay overall limit bucket size of device profile."
                  },
                  "relayGlobalUplinkLimitReloadRate": {
                    "type": "number",
                    "description": "The relay overall limit reload rate of device profile."
                  },
                  "relayOverallLimitBucketSize": {
                    "type": "number",
                    "description": "The relay overall limit bucket size of device profile."
                  },
                  "relayOverallLimitReloadRate": {
                    "type": "number",
                    "description": "The relay overall limit reload rate of device profile."
                  },
                  "isRelayEd": {
                    "type": "boolean",
                    "description": "The is relay ED of device profile."
                  },
                  "relayEdRelayOnly": {
                    "type": "boolean",
                    "description": "The relay ED relay only of device profile."
                  },
                  "relayEdActivationMode": {
                    "type": "number",
                    "description": "The relay ED activation mode of device profile."
                  },
                  "relayEdSmartEnableLevel": {
                    "type": "number",
                    "description": "The relay ED smart enable level of device profile."
                  },
                  "relayEdBackOff": {
                    "type": "number",
                    "description": "The relay ED back off of device profile."
                  },
                  "relayEdUplinkLimitBucketSize": {
                    "type": "number",
                    "description": "The relay ED uplink limit bucket size of device profile."
                  },
                  "relayEdUplinkLimitReloadRate": {
                    "type": "number",
                    "description": "The relay ED uplink limit reload rate of device profile."
                  }
                },
                "required": [
                  "name",
                  "region",
                  "macVersion",
                  "regParamsRevision",
                  "adrAlgorithmId",
                  "uplinkInterval"
                ]
              },
              "example": {
                "tenantId": "b004ebe0-xxxx-xxxx-xxxx-dacd251b6f00",
                "id": "ff7684e4-xxxx-xxxx-xxxx-6f42763591d1",
                "name": "AS923-ClassC",
                "description": "",
                "region": 7,
                "macVersion": 3,
                "regionConfigId": "as923",
                "regParamsRevision": 0,
                "adrAlgorithmId": "default",
                "flushQueueOnActivate": true,
                "uplinkInterval": 3600,
                "deviceStatusReqInterval": 30,
                "supportsOtaa": true,
                "abpRx1Delay": 0,
                "abpRx1DrOffset": 0,
                "abpRx2Dr": 0,
                "abpRx2Freq": 0,
                "supportsClassB": false,
                "classBTimeout": 0,
                "classBPingSlotNbK": 0,
                "classBPingSlotDr": 0,
                "classBPingSlotFreq": 0,
                "supportsClassC": true,
                "classCTimeout": 0,
                "isRelay": false,
                "relayEnabled": false,
                "relayDefaultChannelIndex": 0,
                "relaySecondChannelFreq": 0,
                "relaySecondChannelDr": 0,
                "relaySecondChannelAckOffset": 0,
                "relayCadPeriodicity": 0,
                "relayJoinReqLimitBucketSize": 0,
                "relayJoinReqLimitReloadRate": 0,
                "relayNotifyLimitBucketSize": 0,
                "relayNotifyLimitReloadRate": 0,
                "relayGlobalUplinkLimitBucketSize": 0,
                "relayGlobalUplinkLimitReloadRate": 0,
                "relayOverallLimitBucketSize": 0,
                "relayOverallLimitReloadRate": 0,
                "isRelayEd": false,
                "relayEdRelayOnly": false,
                "relayEdActivationMode": 0,
                "relayEdSmartEnableLevel": 0,
                "relayEdBackOff": 0,
                "relayEdUplinkLimitBucketSize": 0,
                "relayEdUplinkLimitReloadRate": 0,
                "tagsMap": [
                  {
                    "key": "Rooftop",
                    "value": "Weather monitoring"
                  }
                ]
              },
              "description": ""
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "tenantId": {
                            "type": "string"
                          },
                          "id": {
                            "type": "string"
                          },
                          "name": {
                            "type": "string"
                          },
                          "description": {
                            "type": "string"
                          },
                          "region": {
                            "type": "number"
                          },
                          "regionConfigId": {
                            "type": "string"
                          },
                          "macVersion": {
                            "type": "number"
                          },
                          "regParamsRevision": {
                            "type": "number"
                          },
                          "adrAlgorithmId": {
                            "type": "string"
                          },
                          "flushQueueOnActivate": {
                            "type": "boolean"
                          },
                          "uplinkInterval": {
                            "type": "boolean"
                          },
                          "deviceStatusReqInterval": {
                            "type": "number"
                          },
                          "supportsOtaa": {
                            "type": "boolean"
                          },
                          "abpRx1Delay": {
                            "type": "number"
                          },
                          "abpRx1DrOffset": {
                            "type": "number"
                          },
                          "abpRx2Dr": {
                            "type": "number"
                          },
                          "abpRx2Freq": {
                            "type": "number"
                          },
                          "supportsClassB": {
                            "type": "boolean"
                          },
                          "classBTimeout": {
                            "type": "number"
                          },
                          "classBPingSlotNbK": {
                            "type": "number"
                          },
                          "classBPingSlotDr": {
                            "type": "number"
                          },
                          "classBPingSlotFreq": {
                            "type": "number"
                          },
                          "supportsClassC": {
                            "type": "boolean"
                          },
                          "classCTimeout": {
                            "type": "number"
                          },
                          "isRelay": {
                            "type": "boolean"
                          },
                          "relayEnabled": {
                            "type": "boolean"
                          },
                          "relayDefaultChannelIndex": {
                            "type": "number"
                          },
                          "relaySecondChannelFreq": {
                            "type": "number"
                          },
                          "relaySecondChannelDr": {
                            "type": "number"
                          },
                          "relaySecondChannelAckOffset": {
                            "type": "number"
                          },
                          "relayCadPeriodicity": {
                            "type": "number"
                          },
                          "relayJoinReqLimitBucketSize": {
                            "type": "number"
                          },
                          "relayJoinReqLimitReloadRate": {
                            "type": "number"
                          },
                          "relayNotifyLimitBucketSize": {
                            "type": "number"
                          },
                          "relayNotifyLimitReloadRate": {
                            "type": "number"
                          },
                          "relayGlobalUplinkLimitBucketSize": {
                            "type": "number"
                          },
                          "relayGlobalUplinkLimitReloadRate": {
                            "type": "number"
                          },
                          "relayOverallLimitBucketSize": {
                            "type": "number"
                          },
                          "relayOverallLimitReloadRate": {
                            "type": "number"
                          },
                          "isRelayEd": {
                            "type": "boolean"
                          },
                          "relayEdRelayOnly": {
                            "type": "boolean"
                          },
                          "relayEdActivationMode": {
                            "type": "number"
                          },
                          "relayEdSmartEnableLevel": {
                            "type": "number"
                          },
                          "relayEdBackOff": {
                            "type": "number"
                          },
                          "relayEdUplinkLimitBucketSize": {
                            "type": "number"
                          },
                          "relayEdUplinkLimitReloadRate": {
                            "type": "number"
                          },
                          "tagsMap": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {},
                              "required": []
                            }
                          }
                        },
                        "required": [
                          "tenantId",
                          "id",
                          "name",
                          "description",
                          "region",
                          "regionConfigId",
                          "macVersion",
                          "regParamsRevision",
                          "adrAlgorithmId",
                          "flushQueueOnActivate",
                          "uplinkInterval",
                          "deviceStatusReqInterval",
                          "supportsOtaa",
                          "abpRx1Delay",
                          "abpRx1DrOffset",
                          "abpRx2Dr",
                          "abpRx2Freq",
                          "supportsClassB",
                          "classBTimeout",
                          "classBPingSlotNbK",
                          "classBPingSlotDr",
                          "classBPingSlotFreq",
                          "supportsClassC",
                          "classCTimeout",
                          "isRelay",
                          "relayEnabled",
                          "relayDefaultChannelIndex",
                          "relaySecondChannelFreq",
                          "relaySecondChannelDr",
                          "relaySecondChannelAckOffset",
                          "relayCadPeriodicity",
                          "relayJoinReqLimitBucketSize",
                          "relayJoinReqLimitReloadRate",
                          "relayNotifyLimitBucketSize",
                          "relayNotifyLimitReloadRate",
                          "relayGlobalUplinkLimitBucketSize",
                          "relayGlobalUplinkLimitReloadRate",
                          "relayOverallLimitBucketSize",
                          "relayOverallLimitReloadRate",
                          "isRelayEd",
                          "relayEdRelayOnly",
                          "relayEdActivationMode",
                          "relayEdSmartEnableLevel",
                          "relayEdBackOff",
                          "relayEdUplinkLimitBucketSize",
                          "relayEdUplinkLimitReloadRate",
                          "tagsMap"
                        ]
                      }
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "404": {
            "description": "The resource hasn't found."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      }
    },
    "/lns/tenants/{tenantId}/gateways": {
      "post": {
        "summary": "Create Gateway",
        "description": "Create gateway",
        "operationId": "LNS_Gateway.CreateGateway",
        "tags": ["LNS Gateway"],
        "parameters": [
          {
            "name": "tenantId",
            "description": "The ID of tenant.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "gatewayId": {
                    "type": "string",
                    "description": "The ID of gateway."
                  },
                  "name": {
                    "type": "string",
                    "description": "The name of gateway."
                  },
                  "description": {
                    "type": "string",
                    "description": "The description of gateway."
                  },
                  "statsInterval": {
                    "type": "number",
                    "description": "The stats interval of gateway."
                  },
                  "tagsMap": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {},
                      "required": []
                    },
                    "description": "The tagsMsp of gateway."
                  }
                },
                "required": ["gatewayId", "name", "statsInterval"]
              },
              "example": {
                "gatewayId": "24e124fffef23456",
                "name": "24E124FFFEF23456",
                "description": "IDT-Gateway-Description",
                "statsInterval": 30,
                "tagsMap": []
              },
              "description": ""
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "tenantId": {
                          "type": "string"
                        },
                        "gatewayId": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "statsInterval": {
                          "type": "number"
                        },
                        "tagsMap": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {},
                            "required": []
                          }
                        }
                      },
                      "required": [
                        "tenantId",
                        "gatewayId",
                        "name",
                        "description",
                        "statsInterval",
                        "tagsMap"
                      ]
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "404": {
            "description": "The resource hasn't found."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      },
      "get": {
        "summary": "List Gateways",
        "description": "List gateways",
        "operationId": "LNS_Gateway.ListGateways",
        "tags": ["LNS Gateway"],
        "parameters": [
          {
            "name": "tenantId",
            "description": "The ID of tenant.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "description": "The offset of gateway.",
            "in": "query",
            "schema": {
              "type": "number",
              "minimum": 0,
              "default": 0
            },
            "required": false
          },
          {
            "name": "limit",
            "description": "The limit of gateway.",
            "in": "query",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 20
            },
            "required": false
          }
        ],
        "requestBody": {},
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "tenantId": {
                            "type": "string"
                          },
                          "gatewayId": {
                            "type": "string"
                          },
                          "name": {
                            "type": "string"
                          },
                          "state": {
                            "type": "object",
                            "properties": {},
                            "required": []
                          },
                          "propertiesMap": {
                            "type": "object",
                            "properties": {},
                            "required": []
                          },
                          "lastSeenAt": {
                            "type": "number"
                          },
                          "createdAt": {
                            "type": "number"
                          },
                          "updatedAt": {
                            "type": "number"
                          }
                        },
                        "required": [
                          "tenantId",
                          "gatewayId",
                          "name",
                          "state",
                          "propertiesMap",
                          "lastSeenAt",
                          "createdAt",
                          "updatedAt"
                        ]
                      }
                    },
                    "totalCount": {
                      "type": "number"
                    }
                  },
                  "required": ["data", "totalCount"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "404": {
            "description": "The resource hasn't found."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      }
    },
    "/lns/tenants/{tenantId}/gateways/{gatewayId}": {
      "delete": {
        "summary": "Delete Gateway",
        "description": "Delete gateway",
        "operationId": "LNS_Gateway.DeleteGateway",
        "tags": ["LNS Gateway"],
        "parameters": [
          {
            "name": "tenantId",
            "description": "The ID of tenant.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "gatewayId",
            "description": "The ID of gateway.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {},
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {},
                      "required": []
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "404": {
            "description": "The resource hasn't found."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      },
      "get": {
        "summary": "Get Gateway",
        "description": "Get gateway",
        "operationId": "LNS_Gateway.GetGateway",
        "tags": ["LNS Gateway"],
        "parameters": [
          {
            "name": "tenantId",
            "description": "The ID of tenant.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "gatewayId",
            "description": "The ID of gateway.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {},
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "tenantId": {
                          "type": "string"
                        },
                        "gatewayId": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "statsInterval": {
                          "type": "number"
                        },
                        "lastSeenAt": {
                          "type": "number"
                        },
                        "tagsMap": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {},
                            "required": []
                          }
                        },
                        "createdAt": {
                          "type": "number"
                        },
                        "updatedAt": {
                          "type": "number"
                        }
                      },
                      "required": [
                        "tenantId",
                        "gatewayId",
                        "name",
                        "description",
                        "statsInterval",
                        "lastSeenAt",
                        "tagsMap",
                        "createdAt",
                        "updatedAt"
                      ]
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "404": {
            "description": "The resource hasn't found."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      },
      "put": {
        "summary": "Update Gateway",
        "description": "Update gateway",
        "operationId": "LNS_Gateway.UpdateGateway",
        "tags": ["LNS Gateway"],
        "parameters": [
          {
            "name": "tenantId",
            "description": "The ID of tenant.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "gatewayId",
            "description": "The ID of gateway.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of gateway."
                  },
                  "description": {
                    "type": "string",
                    "description": "The description of gateway."
                  },
                  "statsInterval": {
                    "type": "number",
                    "description": "The stats interval of gateway."
                  },
                  "tagsMap": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {},
                      "required": []
                    },
                    "description": "The tagsMsp of gateway."
                  }
                },
                "required": ["name", "statsInterval"]
              },
              "example": {
                "name": "24E124FFFEF23456",
                "description": "IDT-Gateway-Description",
                "statsInterval": 30,
                "tagsMap": []
              },
              "description": ""
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "tenantId": {
                          "type": "string"
                        },
                        "gatewayId": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "statsInterval": {
                          "type": "number"
                        },
                        "tagsMap": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {},
                            "required": []
                          }
                        }
                      },
                      "required": [
                        "tenantId",
                        "gatewayId",
                        "name",
                        "description",
                        "statsInterval",
                        "tagsMap"
                      ]
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "404": {
            "description": "The resource hasn't found."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      }
    },
    "/organizations/{organizationId}/locations": {
      "post": {
        "summary": "Create Location",
        "description": "Create location",
        "operationId": "Location.CreateLocation",
        "tags": ["Location"],
        "parameters": [
          {
            "name": "organizationId",
            "description": "The ID of organization.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parentId": {
                    "type": "string",
                    "description": "The parent location ID"
                  },
                  "name": {
                    "type": "string",
                    "description": "The name of location"
                  },
                  "description": {
                    "type": "string",
                    "description": "The description of location"
                  },
                  "address": {
                    "type": "string",
                    "description": "The address of location"
                  },
                  "chatRoomId": {
                    "type": "string",
                    "description": "The ID of chat room"
                  },
                  "entities": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "The entities of location"
                  },
                  "image": {
                    "type": "string",
                    "description": "The image of location"
                  }
                },
                "required": ["name"]
              },
              "example": {
                "parentId": "l-0123456789",
                "name": "IDT-Location",
                "description": "IDT-Location-Description",
                "address": "Taipei City",
                "chatRoomId": "5UB3K",
                "entities": [],
                "image": "abc.png"
              },
              "description": ""
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {},
                      "required": []
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "404": {
            "description": "The resource hasn't found."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      },
      "get": {
        "summary": "List Locations",
        "description": "List locations",
        "operationId": "Location.ListLocations",
        "tags": ["Location"],
        "parameters": [
          {
            "name": "organizationId",
            "description": "The ID of organization.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "parentId",
            "description": "The parent location ID",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "maxResults",
            "description": "The maximum number of results to return.",
            "in": "query",
            "schema": {
              "type": "number",
              "minimum": 10,
              "maximum": 100
            },
            "required": false
          },
          {
            "name": "nextToken",
            "description": "To retrieve the next set of results.",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false
          }
        ],
        "requestBody": {},
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {},
                      "required": []
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "404": {
            "description": "The resource hasn't found."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      }
    },
    "/organizations/{organizationId}/locations/{locationId}": {
      "delete": {
        "summary": "Delete Location",
        "description": "Delete location",
        "operationId": "Location.DeleteLocation",
        "tags": ["Location"],
        "parameters": [
          {
            "name": "organizationId",
            "description": "The ID of organization.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "description": "The ID of location",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {},
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {},
                      "required": []
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "404": {
            "description": "The resource hasn't found."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      },
      "get": {
        "summary": "Get Location",
        "description": "Get location",
        "operationId": "Location.GetLocation",
        "tags": ["Location"],
        "parameters": [
          {
            "name": "organizationId",
            "description": "The ID of organization.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "description": "The ID of location",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {},
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {},
                      "required": []
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "404": {
            "description": "The resource hasn't found."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      },
      "put": {
        "summary": "Update Location",
        "description": "Update location",
        "operationId": "Location.UpdateLocation",
        "tags": ["Location"],
        "parameters": [
          {
            "name": "organizationId",
            "description": "The ID of organization.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "description": "The ID of location",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of location"
                  },
                  "description": {
                    "type": "string",
                    "description": "The description of location"
                  },
                  "address": {
                    "type": "string",
                    "description": "The address of location"
                  },
                  "chatRoomId": {
                    "type": "string",
                    "description": "The ID of chat room"
                  },
                  "entities": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "The entities of location"
                  },
                  "image": {
                    "type": "string",
                    "description": "The image of location"
                  }
                },
                "required": ["name"]
              },
              "example": {
                "name": "IDT-Location",
                "description": "IDT-Location-Description",
                "address": "Taipei City",
                "chatRoomId": "5UB3K",
                "entities": [],
                "image": "abc.png"
              },
              "description": ""
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {},
                      "required": []
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "404": {
            "description": "The resource hasn't found."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      }
    },
    "/organizations/{organizationId}/locations/{locationId}/assets": {
      "get": {
        "summary": "List Assest from Location ID",
        "description": "List assets",
        "operationId": "Location.ListAssetsFromLocationId",
        "tags": ["Location"],
        "parameters": [
          {
            "name": "organizationId",
            "description": "The ID of organization.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "description": "The ID of location.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "shadowNames",
            "description": "Specify shadow names to fetch. (Default: DeviceUplink)",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "required": false
          },
          {
            "name": "maxResults",
            "description": "The maximum number of results to return.",
            "in": "query",
            "schema": {
              "type": "number",
              "minimum": 10,
              "maximum": 25
            },
            "required": false
          },
          {
            "name": "nextToken",
            "description": "To retrieve the next set of results.",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false
          }
        ],
        "requestBody": {},
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {},
                      "required": []
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "404": {
            "description": "The resource hasn't found."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      }
    },
    "/organizations/{organizationId}/notifications": {
      "post": {
        "summary": "Create User Device Endpoint",
        "description": "Create User Device Endpoint",
        "operationId": "Notification.CreateUserDeviceEndpoint",
        "tags": ["Notification"],
        "parameters": [
          {
            "name": "organizationId",
            "description": "The ID of organization.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "description": "The ID of user.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "endpoint": {
                    "type": "string",
                    "description": "The equivalent endpoint of phone or browser."
                  },
                  "platform": {
                    "type": "string",
                    "description": "The notification platform(GCM, APNS, APNS_SANDBOX, BROWSER)."
                  }
                },
                "required": ["endpoint", "platform"]
              },
              "example": {
                "endpoint": "https://gcm.googleapis.com/xxxxxxxxxxxx",
                "platform": "GCM"
              },
              "description": ""
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {},
                      "required": []
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "404": {
            "description": "The resource hasn't found."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      },
      "delete": {
        "summary": "Delete User Device Endpoint",
        "description": "Delete User Device Endpoint",
        "operationId": "Notification.DeleteUserDeviceEndpoint",
        "tags": ["Notification"],
        "parameters": [
          {
            "name": "organizationId",
            "description": "The ID of organization.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "description": "The ID of user.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {},
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {},
                      "required": []
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "404": {
            "description": "The resource hasn't found."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      },
      "get": {
        "summary": "List Notifications",
        "description": "List notifications",
        "operationId": "Notification.ListNotifications",
        "tags": ["Notification"],
        "parameters": [
          {
            "name": "organizationId",
            "description": "The ID of organization.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assetId",
            "description": "The Id of asset.",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "startDate",
            "description": "The start date number of query.",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "endDate",
            "description": "The end date number of query.",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "maxResults",
            "description": "The maximum number of results to return.",
            "in": "query",
            "schema": {
              "type": "number",
              "minimum": 10,
              "maximum": 100
            },
            "required": false
          },
          {
            "name": "nextToken",
            "description": "To retrieve the next set of results.",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false
          }
        ],
        "requestBody": {},
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {},
                      "required": []
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "404": {
            "description": "The resource hasn't found."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      }
    },
    "/organizations/{organizationId}/teams/{teamId}/assets/{assetId}": {
      "put": {
        "summary": "Add Asset To Team",
        "description": "Add asset to team for organization",
        "operationId": "Organization.AddAssetToTeam",
        "tags": ["Organization"],
        "parameters": [
          {
            "name": "organizationId",
            "description": "The ID of organization.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "teamId",
            "description": "The ID of team.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assetId",
            "description": "The ID of asset.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {},
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {},
                      "required": []
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "404": {
            "description": "The resource hasn't found."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      },
      "delete": {
        "summary": "Remove Asset From Team",
        "description": "Remove asset from team for organization",
        "operationId": "Organization.RemoveAssetFromTeam",
        "tags": ["Organization"],
        "parameters": [
          {
            "name": "organizationId",
            "description": "The ID of organization.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "teamId",
            "description": "The ID of team.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assetId",
            "description": "The ID of asset.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {},
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {},
                      "required": []
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "404": {
            "description": "The resource hasn't found."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      }
    },
    "/organizations/{organizationId}/teams/{teamId}/users/{userId}": {
      "put": {
        "summary": "Add User To Team",
        "description": "Add user to team for organization",
        "operationId": "Organization.AddUserToTeam",
        "tags": ["Organization"],
        "parameters": [
          {
            "name": "organizationId",
            "description": "The ID of organization.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "teamId",
            "description": "The ID of team.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "description": "The ID of user.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {},
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {},
                      "required": []
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "404": {
            "description": "The resource hasn't found."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      },
      "delete": {
        "summary": "Remove User From Team",
        "description": "Remove user from team for organization",
        "operationId": "Organization.RemoveUserFromTeam",
        "tags": ["Organization"],
        "parameters": [
          {
            "name": "organizationId",
            "description": "The ID of organization.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "teamId",
            "description": "The ID of team.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "description": "The ID of user.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {},
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {},
                      "required": []
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "404": {
            "description": "The resource hasn't found."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      }
    },
    "/admin/organizations/{organizationId}/invitations": {
      "post": {
        "summary": "Admin Create Invitation",
        "description": "Admin Create Invitation",
        "operationId": "Organization.AdminCreateInvitation",
        "tags": ["Organization"],
        "parameters": [
          {
            "name": "organizationId",
            "description": "The ID of organization.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "dealerId": {
                    "type": "string",
                    "description": "The ID of dealer."
                  },
                  "email": {
                    "type": "string",
                    "description": "The email of invitee"
                  },
                  "secondsOfExpire": {
                    "type": "number",
                    "description": "The seconds of expire."
                  }
                },
                "required": ["dealerId", "email", "secondsOfExpire"]
              },
              "example": {
                "dealerId": "dl-d9CqzxxxxxxxxxxxxxxxxT",
                "email": "example@infodeck.io",
                "secondsOfExpire": 86400
              },
              "description": ""
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "token": {
                          "type": "string"
                        }
                      },
                      "required": ["token"]
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "404": {
            "description": "The resource hasn't found."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "admin": []
          }
        ]
      }
    },
    "/admin/organizations": {
      "post": {
        "summary": "Admin Create Organization",
        "description": "Admin Create Organization",
        "operationId": "Organization.AdminCreateOrganization",
        "tags": ["Organization"],
        "parameters": [
          {
            "name": "remove",
            "description": "",
            "in": "path",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "dealerId": {
                    "type": "string",
                    "description": "DealerId of organization."
                  },
                  "awsAccountId": {
                    "type": "string",
                    "description": "The ID of AWS account."
                  },
                  "awsRegion": {
                    "type": "string",
                    "description": "Provision region on the AWS."
                  },
                  "iotEndpoint": {
                    "type": "string",
                    "description": "The endpoint on the AWS IoT."
                  }
                },
                "required": [
                  "dealerId",
                  "awsAccountId",
                  "awsRegion",
                  "iotEndpoint"
                ]
              },
              "example": {
                "dealerId": "dl-d9Cqzxxxxxxxxxxxxxxxx",
                "awsAccountId": "0123-4567-8901",
                "awsRegion": "us-abcd-1",
                "iotEndpoint": "abcdefghijklmn.iot.us-abcd-1.amazonaws.com"
              },
              "description": ""
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "dealerId": {
                          "type": "string"
                        },
                        "awsAccountId": {
                          "type": "string"
                        },
                        "awsRegion": {
                          "type": "string"
                        },
                        "createdAt": {
                          "type": "string"
                        },
                        "updatedAt": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "id",
                        "dealerId",
                        "awsAccountId",
                        "awsRegion",
                        "createdAt",
                        "updatedAt"
                      ]
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "404": {
            "description": "The resource hasn't found."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "admin": []
          }
        ]
      },
      "get": {
        "summary": "Admin List Organizations",
        "description": "Admin List Organizations",
        "operationId": "Organization.AdminListOrganizations",
        "tags": ["Organization"],
        "parameters": [
          {
            "name": "maxResults",
            "description": "The maximum number of results to return.",
            "in": "query",
            "schema": {
              "type": "number",
              "minimum": 10,
              "maximum": 100,
              "default": 20
            },
            "required": false
          },
          {
            "name": "nextToken",
            "description": "To retrieve the next set of results.",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false
          }
        ],
        "requestBody": {},
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "companyName": {
                            "type": "string"
                          },
                          "companyVat": {
                            "type": "string"
                          },
                          "companyAddress": {
                            "type": "string"
                          },
                          "dealerId": {
                            "type": "string"
                          },
                          "awsAccountId": {
                            "type": "string"
                          },
                          "awsRegion": {
                            "type": "string"
                          },
                          "createdAt": {
                            "type": "string"
                          },
                          "updatedAt": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "id",
                          "companyName",
                          "companyVat",
                          "companyAddress",
                          "dealerId",
                          "awsAccountId",
                          "awsRegion",
                          "createdAt",
                          "updatedAt"
                        ]
                      }
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "admin": []
          }
        ]
      }
    },
    "/organizations/{organizationId}/invitations/{code}": {
      "put": {
        "summary": "Cancel Invitation",
        "description": "Cancel invitation for organization",
        "operationId": "Organization.CancelInvitation",
        "tags": ["Organization"],
        "parameters": [
          {
            "name": "organizationId",
            "description": "The ID of organization.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "code",
            "description": "The code of invitation.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {},
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {},
                      "required": []
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "404": {
            "description": "The resource hasn't found."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      },
      "get": {
        "summary": "Get Invitation",
        "description": "Get invitation for user",
        "operationId": "Organization.GetInvitation",
        "tags": ["Organization"],
        "parameters": [
          {
            "name": "organizationId",
            "description": "The ID of organization.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "code",
            "description": "The code of invitation.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {},
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {},
                      "required": []
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "404": {
            "description": "The resource hasn't found."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      }
    },
    "/organizations/{organizationId}/users/avaliable": {
      "get": {
        "summary": "Count available user",
        "description": "Count available user",
        "operationId": "Organization.CountAvailableUser",
        "tags": ["Organization"],
        "parameters": [
          {
            "name": "organizationId",
            "description": "The ID of organization.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {},
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "total": {
                          "type": "number"
                        }
                      },
                      "required": ["total"]
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "404": {
            "description": "The resource hasn't found."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      }
    },
    "/organizations/{organizationId}/invitations": {
      "post": {
        "summary": "Create Invitation",
        "description": "Create invitation for organization",
        "operationId": "Organization.CreateInvitation",
        "tags": ["Organization"],
        "parameters": [
          {
            "name": "organizationId",
            "description": "The ID of organization.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "description": "The email of user."
                  },
                  "familyName": {
                    "type": "string",
                    "description": "The family name of user."
                  },
                  "givenName": {
                    "type": "string",
                    "description": "The given name of user."
                  },
                  "appRole": {
                    "type": "string",
                    "description": "The role of user."
                  }
                },
                "required": ["email", "familyName", "givenName", "appRole"]
              },
              "example": {
                "familyName": "Info",
                "givenName": "Deck",
                "email": "example@infodeck.io",
                "appRole": "viewer"
              },
              "description": ""
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {},
                      "required": []
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      },
      "get": {
        "summary": "List Invitations",
        "description": "List invitations for organization",
        "operationId": "Organization.ListInvitations",
        "tags": ["Organization"],
        "parameters": [
          {
            "name": "organizationId",
            "description": "The ID of organization.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "maxResults",
            "description": "The maximum number of results to return.",
            "in": "query",
            "schema": {
              "type": "number",
              "minimum": 10,
              "maximum": 100
            },
            "required": false
          },
          {
            "name": "nextToken",
            "description": "To retrieve the next set of results.",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false
          }
        ],
        "requestBody": {},
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {},
                      "required": []
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "404": {
            "description": "The resource hasn't found."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      }
    },
    "/organizations": {
      "post": {
        "summary": "Create Organization",
        "description": "Create Organization",
        "operationId": "Organization.CreateOrganization",
        "tags": ["Organization"],
        "parameters": [
          {
            "name": "remove",
            "description": "",
            "in": "path",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "companyName": {
                    "type": "string",
                    "description": "The company name of organization."
                  },
                  "companyAddress": {
                    "type": "string",
                    "description": "The company address of organization."
                  },
                  "companyVat": {
                    "type": "string",
                    "description": "The company VAT of organization."
                  },
                  "customUrl": {
                    "type": "string",
                    "description": "The URL of organization."
                  },
                  "timezone": {
                    "type": "string",
                    "description": "The timezone of organization."
                  },
                  "subscription": {
                    "type": "string",
                    "description": "The subscription of organization."
                  }
                },
                "required": [
                  "companyName",
                  "customUrl",
                  "timezone",
                  "subscription"
                ]
              },
              "example": {
                "companyName": "Infodeck",
                "companyVat": "VAT-XXXXX",
                "companyAddress": "Taipei City",
                "customUrl": "infodeck",
                "timezone": "Asia/Taipei",
                "subscription": "trial"
              },
              "description": ""
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "awsAccountId": {
                          "type": "string"
                        },
                        "awsRegion": {
                          "type": "string"
                        },
                        "companyAddress": {
                          "type": "string"
                        },
                        "companyVat": {
                          "type": "string"
                        },
                        "customUrl": {
                          "type": "string"
                        },
                        "createdAt": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "id",
                        "awsAccountId",
                        "awsRegion",
                        "companyAddress",
                        "companyVat",
                        "customUrl",
                        "createdAt"
                      ]
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "404": {
            "description": "The resource hasn't found."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      }
    },
    "/organizations/{organizationId}/subscribes": {
      "post": {
        "summary": "Create origanization subscribe",
        "description": "Create organization subscribe",
        "operationId": "Organization.CreateOrganizationSubscribe",
        "tags": ["Organization"],
        "parameters": [
          {
            "name": "organizationId",
            "description": "The ID of organization.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "serialNumber": {
                    "type": "string",
                    "description": "A serialNumber."
                  }
                },
                "required": ["serialNumber"]
              },
              "example": {
                "serialNumber": "0123456789"
              },
              "description": ""
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "organizationId": {
                          "type": "string"
                        },
                        "serialNumber": {
                          "type": "string"
                        },
                        "contractPeriod": {
                          "type": "string"
                        },
                        "contractStartedAt": {
                          "type": "string"
                        },
                        "contractStoppedAt": {
                          "type": "string"
                        },
                        "createdAt": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "organizationId",
                        "serialNumber",
                        "contractPeriod",
                        "contractStartedAt",
                        "contractStoppedAt",
                        "createdAt"
                      ]
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "404": {
            "description": "The resource hasn't found."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      }
    },
    "/organizations/{organizationId}/users/{userId}": {
      "delete": {
        "summary": "Delete User",
        "description": "Delete user for organization",
        "operationId": "Organization.DeleteUser",
        "tags": ["Organization"],
        "parameters": [
          {
            "name": "organizationId",
            "description": "The ID of organization.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "description": "The ID of user.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {},
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {},
                      "required": []
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "404": {
            "description": "The resource hasn't found."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      },
      "get": {
        "summary": "Get User",
        "description": "Get user for organization",
        "operationId": "Organization.GetUser",
        "tags": ["Organization"],
        "parameters": [
          {
            "name": "organizationId",
            "description": "The ID of organization.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "description": "The ID of user.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {},
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {},
                      "required": []
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "404": {
            "description": "The resource hasn't found."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      },
      "put": {
        "summary": "Update User",
        "description": "Update user for organization",
        "operationId": "Organization.UpdateUser",
        "tags": ["Organization"],
        "parameters": [
          {
            "name": "organizationId",
            "description": "The ID of organization.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "description": "The ID of user",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of user."
                  },
                  "appRole": {
                    "type": "string",
                    "description": "The role of user."
                  }
                },
                "required": ["name", "appRole"]
              },
              "example": {
                "name": "IDT-User",
                "appRole": "viewer"
              },
              "description": ""
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {},
                      "required": []
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "404": {
            "description": "The resource hasn't found."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      }
    },
    "/organizations/{organizationId}/iot-endpoint-and-credentials": {
      "get": {
        "summary": "Get Organization IoT Endpoint And Credentials",
        "description": "Get Organization IoT Endpoint And Credentials",
        "operationId": "Organization.GetOrganizationIotEndpointAndCredentials",
        "tags": ["Organization"],
        "parameters": [
          {
            "name": "organizationId",
            "description": "The ID of organization.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {},
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "awsRegion": {
                          "type": "string"
                        },
                        "iotEndpoint": {
                          "type": "string"
                        },
                        "credentials": {
                          "type": "object",
                          "properties": {
                            "accessKeyId": {
                              "type": "string"
                            },
                            "secretAccessKey": {
                              "type": "string"
                            },
                            "sessionToken": {
                              "type": "string"
                            },
                            "expiration": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "accessKeyId",
                            "secretAccessKey",
                            "sessionToken",
                            "expiration"
                          ]
                        }
                      },
                      "required": ["awsRegion", "iotEndpoint", "credentials"]
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      }
    },
    "/organizations/{organizationId}": {
      "get": {
        "summary": "Get current user organization",
        "description": "Get current user organization",
        "operationId": "Organization.Get_current_user_organization",
        "tags": ["Organization"],
        "parameters": [
          {
            "name": "organizationId",
            "description": "",
            "in": "path",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {},
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "dealerId": {
                          "type": "string"
                        },
                        "awsAccountId": {
                          "type": "string"
                        },
                        "awsRegion": {
                          "type": "string"
                        },
                        "createdAt": {
                          "type": "string"
                        },
                        "updatedAt": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "id",
                        "dealerId",
                        "awsAccountId",
                        "awsRegion",
                        "createdAt",
                        "updatedAt"
                      ]
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "404": {
            "description": "The resource hasn't found."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      },
      "put": {
        "summary": "Update Organization",
        "description": "Update Organization",
        "operationId": "Organization.UpdateOrganization",
        "tags": ["Organization"],
        "parameters": [
          {
            "name": "organizationId",
            "description": "The ID of organization.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "companyName": {
                    "type": "string",
                    "description": "The company name of organization."
                  },
                  "companyVat": {
                    "type": "string",
                    "description": "The company VAT of organization."
                  },
                  "companyAddress": {
                    "type": "string",
                    "description": "The company address of organization."
                  },
                  "customUrl": {
                    "type": "string",
                    "description": "The URL of organization."
                  },
                  "timezone": {
                    "type": "string",
                    "description": "The timezone of organization."
                  }
                },
                "required": ["companyName", "customUrl", "timezone"]
              },
              "example": {
                "companyName": "Infodeck",
                "companyVat": "VAT-XXXXX",
                "companyAddress": "Taipei City",
                "customUrl": "infodeck",
                "timezone": "Asia/Taipei"
              },
              "description": ""
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {},
                      "required": []
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "404": {
            "description": "The resource hasn't found."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      }
    },
    "/organizations/{organizationId}/teams": {
      "get": {
        "summary": "List Teams",
        "description": "List teams for organization",
        "operationId": "Organization.ListTeams",
        "tags": ["Organization"],
        "parameters": [
          {
            "name": "organizationId",
            "description": "The ID of organization.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "maxResults",
            "description": "The maximum number of results to return.",
            "in": "query",
            "schema": {
              "type": "number",
              "minimum": 10,
              "maximum": 100
            },
            "required": false
          },
          {
            "name": "nextToken",
            "description": "To retrieve the next set of results.",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false
          }
        ],
        "requestBody": {},
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {},
                      "required": []
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "404": {
            "description": "The resource hasn't found."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      },
      "post": {
        "summary": "Create Team",
        "description": "Create team for organization",
        "operationId": "Organization_Team.CreateTeam",
        "tags": ["Organization Team"],
        "parameters": [
          {
            "name": "organizationId",
            "description": "The ID of organization.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of team."
                  },
                  "description": {
                    "type": "string",
                    "description": "The description of team."
                  }
                },
                "required": ["name", "description"]
              },
              "example": {
                "name": "IDT-Team",
                "description": "IDT-Team-Description"
              },
              "description": ""
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {},
                      "required": []
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      }
    },
    "/organizations/{organizationId}/users": {
      "get": {
        "summary": "List Users",
        "description": "List users for organization",
        "operationId": "Organization.ListUsers",
        "tags": ["Organization"],
        "parameters": [
          {
            "name": "organizationId",
            "description": "The ID of organization.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "maxResults",
            "description": "The maximum number of results to return.",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "nextToken",
            "description": "To retrieve the next set of results.",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false
          }
        ],
        "requestBody": {},
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {},
                      "required": []
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "404": {
            "description": "The resource hasn't found."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      }
    },
    "/organizations/{organizationId}/teams/{teamId}/users": {
      "get": {
        "summary": "List Users In Team",
        "description": "List users in team for organization",
        "operationId": "Organization.ListUsersInTeam",
        "tags": ["Organization"],
        "parameters": [
          {
            "name": "organizationId",
            "description": "The ID of organization.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "teamId",
            "description": "The ID of team.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "maxResults",
            "description": "The maximum number of results to return.",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "nextToken",
            "description": "To retrieve the next set of results.",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false
          }
        ],
        "requestBody": {},
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {},
                      "required": []
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "404": {
            "description": "The resource hasn't found."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      }
    },
    "/organizations/{organizationId}/teams/{teamId}": {
      "put": {
        "summary": "Update Team",
        "description": "Update team for organization",
        "operationId": "Organization.UpdateTeam",
        "tags": ["Organization"],
        "parameters": [
          {
            "name": "organizationId",
            "description": "The ID of organization.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "teamId",
            "description": "The ID of team",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of team."
                  },
                  "description": {
                    "type": "string",
                    "description": "The description of team."
                  }
                },
                "required": ["name", "description"]
              },
              "example": {
                "name": "IDT-Team",
                "description": "IDT-Team-Description"
              },
              "description": ""
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {},
                      "required": []
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "404": {
            "description": "The resource hasn't found."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      },
      "delete": {
        "summary": "Delete Team",
        "description": "Delete team for organization",
        "operationId": "Organization_Team.DeleteTeam",
        "tags": ["Organization Team"],
        "parameters": [
          {
            "name": "organizationId",
            "description": "The ID of organization.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "teamId",
            "description": "The ID of team.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {},
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {},
                      "required": []
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "404": {
            "description": "The resource hasn't found."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      },
      "get": {
        "summary": "Get team",
        "description": "Get team for organization",
        "operationId": "Organization_Team.GetTeam",
        "tags": ["Organization Team"],
        "parameters": [
          {
            "name": "organizationId",
            "description": "The ID of organization.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "teamId",
            "description": "The ID of team.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {},
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {},
                      "required": []
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "404": {
            "description": "The resource hasn't found."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      }
    },
    "/organizations/{organizationId}/users/{userId}/status": {
      "put": {
        "summary": "Update User Status",
        "description": "Update status for organization user",
        "operationId": "Organization.UpdateUserStatus",
        "tags": ["Organization"],
        "parameters": [
          {
            "name": "organizationId",
            "description": "The ID of organization.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "description": "The ID of user.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "status": {
                    "type": "string",
                    "description": "SUCCESS, CONFIRM_JOIN, PENDING_ACCEPT."
                  }
                },
                "required": ["status"]
              },
              "example": {
                "status": "CONFIRM_JOIN"
              },
              "description": ""
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {},
                      "required": []
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "404": {
            "description": "The resource hasn't found."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      }
    },
    "/organizations/{organizationId}/add-ons": {
      "get": {
        "summary": "Get add-ons for organization",
        "description": "Get add-ons for organization",
        "operationId": "Organization_Addons.GetAddOnsForOrganization",
        "tags": ["Organization Addons"],
        "parameters": [
          {
            "name": "organizationId",
            "description": "The ID of organization.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {},
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {},
                      "required": []
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "404": {
            "description": "The resource hasn't found."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      },
      "put": {
        "summary": "Update add-ons for organization",
        "description": "Update add-ons for organization",
        "operationId": "Organization_Addons.UpdateAddOnsForOrganization",
        "tags": ["Organization Addons"],
        "parameters": [
          {
            "name": "organizationId",
            "description": "The ID of organization.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "infodeckLns": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string"
                      },
                      "tenantId": {
                        "type": "string"
                      },
                      "apiKey": {
                        "type": "string"
                      }
                    },
                    "required": ["status", "tenantId", "apiKey"],
                    "description": "The infodeckLns of organization."
                  },
                  "anyFeedback": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string"
                      }
                    },
                    "required": ["status"],
                    "description": "The anyFeedback of organization."
                  }
                },
                "required": ["infodeckLns", "anyFeedback"]
              },
              "example": {
                "infodeckLns": {
                  "status": "Success",
                  "tenantId": "52f14cd4-xxxx-xxxx-xxxx-4025e1d49242",
                  "apiKey": "eyJ0xxxxxxxxxxxxxxxxxxxxxx4"
                },
                "anyFeedback": {
                  "status": "Success"
                }
              },
              "description": ""
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {},
                      "required": []
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "404": {
            "description": "The resource hasn't found."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      }
    },
    "/organizations/{organizationId}/services/lorawan-services": {
      "post": {
        "summary": "Get LoRaWAN Services",
        "description": "Get LoRaWAN Services",
        "operationId": "Services.GetLoRaWANServices",
        "tags": ["Services"],
        "parameters": [
          {
            "name": "organizationId",
            "description": "The ID of organization.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "componentNames": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Edge gateway component name list."
                  }
                },
                "required": ["componentNames"]
              },
              "example": {
                "componentNames": ["IDT-BoT"]
              },
              "description": ""
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string"
                          },
                          "name": {
                            "type": "string"
                          },
                          "description": {
                            "type": "string"
                          }
                        },
                        "required": ["type", "name", "description"]
                      }
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      }
    },
    "/organizations/{organizationId}/statistics/work-orders/status": {
      "get": {
        "summary": "Count Work Orders By Date",
        "description": "Count Work Orders By Date",
        "operationId": "Statistics.CountWorkOrdersByDate",
        "tags": ["Statistics"],
        "parameters": [
          {
            "name": "organizationId",
            "description": "The ID of organization.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDate",
            "description": "The start date number of query",
            "in": "query",
            "schema": {
              "type": "number"
            },
            "required": true
          },
          {
            "name": "endDate",
            "description": "The end date number of query",
            "in": "query",
            "schema": {
              "type": "number"
            },
            "required": true
          }
        ],
        "requestBody": {},
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "statusName": {
                            "type": "string"
                          },
                          "value": {
                            "type": "number"
                          }
                        },
                        "required": ["statusName", "value"]
                      }
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      }
    },
    "/organizations/{organizationId}/statistics/work-orders/status/{status}": {
      "get": {
        "summary": "Count Work Orders By Status",
        "description": "Count Work Orders By Status",
        "operationId": "Statistics.CountWorkOrdersByStatus",
        "tags": ["Statistics"],
        "parameters": [
          {
            "name": "organizationId",
            "description": "The ID of organization.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "description": "The status of work order.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDate",
            "description": "The start date number of query",
            "in": "query",
            "schema": {
              "type": "number"
            },
            "required": true
          },
          {
            "name": "endDate",
            "description": "The end date number of query",
            "in": "query",
            "schema": {
              "type": "number"
            },
            "required": true
          }
        ],
        "requestBody": {},
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {},
                      "required": []
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      }
    },
    "/organizations/{organizationId}/statistics/assets/metrics": {
      "post": {
        "summary": "Get Asset Metrics.",
        "description": "Get Asset Metrics",
        "operationId": "Statistics.GetAssetMetrics",
        "tags": ["Statistics"],
        "parameters": [
          {
            "name": "organizationId",
            "description": "The ID of organization.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "startTime": {
                    "type": "number",
                    "description": "The startTime of metrics statistic."
                  },
                  "endTime": {
                    "type": "number",
                    "description": "The endTime of metrics statistic."
                  },
                  "period": {
                    "type": "number",
                    "description": "The period of metrics statistic."
                  },
                  "metrics": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "assetId": {},
                        "properties": {
                          "type": "object",
                          "properties": {
                            "key": {
                              "type": "string"
                            },
                            "aggregation": {
                              "type": "string"
                            },
                            "alias": {
                              "type": "string"
                            }
                          },
                          "required": ["key", "aggregation"]
                        }
                      },
                      "required": ["assetId", "properties"]
                    },
                    "description": "The metrics of statistic."
                  }
                },
                "required": ["startTime", "endTime", "period", "metrics"]
              },
              "example": {
                "startTime": "1700000000000",
                "endTime": "1800000000000",
                "period": 300,
                "metrics": [
                  {
                    "assetId": "a-assetId",
                    "properties": [
                      {
                        "key": "Temperature",
                        "aggregation": "average",
                        "alias": "Temperature"
                      }
                    ]
                  }
                ]
              },
              "description": ""
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {},
                      "required": []
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "404": {
            "description": "The resource hasn't found."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      }
    },
    "/organizations/{organizationId}/statistics/assets/rawdata": {
      "post": {
        "summary": "Get Assets Rawdata.",
        "description": "Get Assets Rawdata",
        "operationId": "Statistics.GetAssetsRawdata",
        "tags": ["Statistics"],
        "parameters": [
          {
            "name": "organizationId",
            "description": "The ID of organization.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "startTime": {
                    "type": "number",
                    "description": "The startTime of metrics statistic."
                  },
                  "endTime": {
                    "type": "number",
                    "description": "The endTime of metrics statistic."
                  },
                  "assetTypeId": {
                    "type": "string",
                    "description": "The ID of asset type."
                  },
                  "assetIds": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "The ID of assets."
                  },
                  "properties": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "The properties of asset type."
                  },
                  "exportFormat": {
                    "type": "string",
                    "description": "The format of export file."
                  }
                },
                "required": ["startTime", "endTime", "properties"]
              },
              "example": {
                "startTime": "1700000000000",
                "endTime": "1800000000000",
                "assetTypeId": "a-assetTypeId",
                "assetIds": ["a-assetId"],
                "properties": ["Temperature"],
                "exportFormat": "CSV"
              },
              "description": ""
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {},
                      "required": []
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "404": {
            "description": "The resource hasn't found."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      }
    },
    "/organizations/{organizationId}/statistics/assets/summary": {
      "get": {
        "summary": "Get Assets Summary",
        "description": "Get Assets Summary",
        "operationId": "Statistics.GetAssetsSummary",
        "tags": ["Statistics"],
        "parameters": [
          {
            "name": "organizationId",
            "description": "The ID of organization.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {},
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "staticAssetTotal": {
                          "type": "number"
                        },
                        "iotDeviceTotal": {
                          "type": "number"
                        },
                        "iotDeviceOnlineTotal": {
                          "type": "number"
                        }
                      },
                      "required": [
                        "staticAssetTotal",
                        "iotDeviceTotal",
                        "iotDeviceOnlineTotal"
                      ]
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      }
    },
    "/organizations/{organizationId}/statistics/integrations/summary": {
      "get": {
        "summary": "Get Integration Services Summary",
        "description": "Get Integration Services Summary",
        "operationId": "Statistics.GetIntegrationServicesSummary",
        "tags": ["Statistics"],
        "parameters": [
          {
            "name": "organizationId",
            "description": "The ID of organization.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {},
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "total": {
                          "type": "number"
                        }
                      },
                      "required": ["total"]
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      }
    },
    "/organizations/{organizationId}/things/{thingName}": {
      "get": {
        "summary": "Get Thing",
        "description": "Get thing",
        "operationId": "Thing.GetThing",
        "tags": ["Thing"],
        "parameters": [
          {
            "name": "organizationId",
            "description": "The ID of organization.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "thingName",
            "description": "The name of IoT device",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {},
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "thingArn": {
                            "type": "string"
                          },
                          "thingName": {
                            "type": "string"
                          },
                          "thingTypeName": {
                            "type": "string"
                          },
                          "attributes": {
                            "type": "object",
                            "properties": {},
                            "required": []
                          },
                          "shadows": {
                            "type": "object",
                            "properties": {},
                            "required": []
                          },
                          "version": {
                            "type": "number"
                          }
                        },
                        "required": [
                          "thingArn",
                          "thingName",
                          "thingTypeName",
                          "attributes",
                          "shadows",
                          "version"
                        ]
                      }
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      }
    },
    "/organizations/{organizationId}/thing-groups": {
      "get": {
        "summary": "List thing groups",
        "description": "List thing groups",
        "operationId": "Thing.ListThingGroups",
        "tags": ["Thing"],
        "parameters": [
          {
            "name": "organizationId",
            "description": "The ID of organization.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "thingTypeName",
            "description": "The name of IoT type",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "maxResults",
            "description": "The maximum number of results to return.",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "10"
            },
            "required": false
          },
          {
            "name": "nextToken",
            "description": "To retrieve the next set of results.",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false
          }
        ],
        "requestBody": {},
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "groupArn": {
                            "type": "string"
                          },
                          "groupName": {
                            "type": "string"
                          }
                        },
                        "required": ["groupArn", "groupName"]
                      }
                    },
                    "nextToken": {
                      "type": "string"
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      }
    },
    "/organizations/{organizationId}/things": {
      "get": {
        "summary": "List things",
        "description": "List things",
        "operationId": "Thing.ListThings",
        "tags": ["Thing"],
        "parameters": [
          {
            "name": "organizationId",
            "description": "The ID of organization.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "thingTypeName",
            "description": "The name of IoT type",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "maxResults",
            "description": "The maximum number of results to return.",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "10"
            },
            "required": false
          },
          {
            "name": "nextToken",
            "description": "To retrieve the next set of results.",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false
          }
        ],
        "requestBody": {},
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "thingArn": {
                            "type": "string"
                          },
                          "thingName": {
                            "type": "string"
                          },
                          "attributes": {
                            "type": "object",
                            "properties": {},
                            "required": []
                          },
                          "version": {
                            "type": "number"
                          }
                        },
                        "required": [
                          "thingArn",
                          "thingName",
                          "attributes",
                          "version"
                        ]
                      }
                    },
                    "nextToken": {
                      "type": "string"
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      }
    },
    "/organizations/{organizationId}/users/{userId}/notifications": {
      "post": {
        "summary": "Create User Device Endpoint",
        "description": "Create User Device Endpoint",
        "operationId": "User_Notification.CreateUserDeviceEndpoint",
        "tags": ["User Notification"],
        "parameters": [
          {
            "name": "organizationId",
            "description": "The ID of organization.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "description": "The ID of user.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "endpoint": {
                    "type": "string",
                    "description": "The equivalent endpoint of phone or browser."
                  },
                  "platform": {
                    "type": "string",
                    "description": "The notification platform(GCM, APNS, APNS_SANDBOX, BROWSER)."
                  }
                },
                "required": ["endpoint", "platform"]
              },
              "example": {
                "endpoint": "https://gcm.googleapis.com/xxxxxxxxxxxx",
                "platform": "GCM"
              },
              "description": ""
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {},
                      "required": []
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "404": {
            "description": "The resource hasn't found."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      },
      "delete": {
        "summary": "Delete User Device Endpoint",
        "description": "Delete User Device Endpoint",
        "operationId": "User_Notification.DeleteUserDeviceEndpoint",
        "tags": ["User Notification"],
        "parameters": [
          {
            "name": "organizationId",
            "description": "The ID of organization.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "description": "The ID of user.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {},
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {},
                      "required": []
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "404": {
            "description": "The resource hasn't found."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      },
      "get": {
        "summary": "List User Notifications",
        "description": "List user notifications",
        "operationId": "User_Notification.ListUserNotifications",
        "tags": ["User Notification"],
        "parameters": [
          {
            "name": "organizationId",
            "description": "The ID of organization.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "description": "The ID of user.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDate",
            "description": "The start date number of timestamp. (Default: 1700000000000)",
            "in": "query",
            "schema": {
              "type": "number"
            },
            "required": false
          },
          {
            "name": "endDate",
            "description": "The end date number of timestamp. (Default: 1700000000000)",
            "in": "query",
            "schema": {
              "type": "number"
            },
            "required": false
          },
          {
            "name": "maxResults",
            "description": "The maximum number of results to return.",
            "in": "query",
            "schema": {
              "type": "number",
              "minimum": 10,
              "maximum": 100
            },
            "required": false
          },
          {
            "name": "nextToken",
            "description": "To retrieve the next set of results.",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false
          }
        ],
        "requestBody": {},
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {},
                      "required": []
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "404": {
            "description": "The resource hasn't found."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      }
    },
    "/organizations/{organizationId}/event-rules": {
      "post": {
        "summary": "Create Event Rule",
        "description": "Create new event rule",
        "operationId": "Workflows.CreateEventRule",
        "tags": ["Workflows"],
        "parameters": [
          {
            "name": "organizationId",
            "description": "The ID of organization.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of event rule."
                  },
                  "description": {
                    "type": "string",
                    "description": "The description of event rule."
                  },
                  "stage": {
                    "type": "string",
                    "description": "The stage of event rule."
                  },
                  "expression": {
                    "type": "string",
                    "description": "The expression of event rule."
                  },
                  "conditions": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {},
                      "required": []
                    },
                    "description": "The conditions of event rule."
                  },
                  "devices": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "The devices of event rule."
                  },
                  "period": {
                    "type": "object",
                    "properties": {},
                    "required": [],
                    "description": "The period of event rule."
                  },
                  "actions": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {},
                      "required": []
                    },
                    "description": "The actions of event rule."
                  },
                  "hashtags": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "The hashtags of event rule."
                  },
                  "status": {
                    "type": "string",
                    "description": "The status of event rule."
                  }
                },
                "required": ["name", "stage", "period", "actions", "status"]
              },
              "example": {
                "name": "IDT-EventRule",
                "description": "IDT-EventRule-Description",
                "stage": "IoTCore",
                "status": "Enabled",
                "targetName": "IoTCore-Target-Name",
                "expression": "IoTCore-Expression",
                "hashtags": ["Important"],
                "conditions": [
                  {
                    "assetId": "a-assetId",
                    "property": "Temperature",
                    "symbol": ">",
                    "valueDataType": "integer",
                    "value": "25",
                    "operator": "AND"
                  }
                ],
                "devices": ["a-assetId"],
                "period": {
                  "startTime": {
                    "hour": 20,
                    "minute": 34
                  },
                  "endTime": {
                    "hour": 21,
                    "minute": 34
                  },
                  "dayOfWeek": [
                    "Sun",
                    "Mon",
                    "Tue",
                    "Wed",
                    "Thu",
                    "Fri",
                    "Sat"
                  ],
                  "dayOfMonth": [31]
                },
                "actions": [
                  {
                    "type": "enqueue",
                    "parameters": {
                      "name": "Power Off",
                      "assetId": "a-assetId",
                      "confirmed": true,
                      "fPort": 85,
                      "payload": "080000ff",
                      "payloadDataType": "string"
                    }
                  }
                ]
              },
              "description": ""
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {},
                      "required": []
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "404": {
            "description": "The resource hasn't found."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      },
      "get": {
        "summary": "List Event Rules",
        "description": "List event rules",
        "operationId": "Workflows.ListEventRules",
        "tags": ["Workflows"],
        "parameters": [
          {
            "name": "organizationId",
            "description": "The ID of organization.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "stage",
            "description": "The stage of event rule.",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["Edge", "IoTCore"]
            },
            "required": false
          },
          {
            "name": "maxResults",
            "description": "The maximum number of results to return.",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "nextToken",
            "description": "To retrieve the next set of results.",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false
          }
        ],
        "requestBody": {},
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {},
                      "required": []
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "404": {
            "description": "The resource hasn't found."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      }
    },
    "/organizations/{organizationId}/event-schedules": {
      "post": {
        "summary": "Create Event Schedule",
        "description": "Create new event rule",
        "operationId": "Workflows.CreateEventSchedule",
        "tags": ["Workflows"],
        "parameters": [
          {
            "name": "organizationId",
            "description": "The ID of organization.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of event schedule."
                  },
                  "description": {
                    "type": "string",
                    "description": "The description of event schedule."
                  },
                  "stage": {
                    "type": "string",
                    "description": "The stage of event schedule."
                  },
                  "targetName": {
                    "type": "string",
                    "description": "The target name of event schedule, when stage is edge."
                  },
                  "expressionType": {
                    "type": "string",
                    "description": "The expression type of event schedule."
                  },
                  "oneTimeExpression": {
                    "type": "number",
                    "description": "The one-time expression of event schedule."
                  },
                  "cronExpression": {
                    "type": "object",
                    "properties": {},
                    "required": [],
                    "description": "The cron expression of event schedule."
                  },
                  "rateExpression": {
                    "type": "object",
                    "properties": {},
                    "required": [],
                    "description": "The rate expression of event schedule."
                  },
                  "timezone": {
                    "type": "number",
                    "description": "The timezone of event schedule."
                  },
                  "startDate": {
                    "type": "number",
                    "description": "The start date of event schedule."
                  },
                  "endDate": {
                    "type": "number",
                    "description": "The end date of event schedule."
                  },
                  "actions": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "The actions of event schedule."
                  },
                  "hashtags": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "The hashtags of event rule."
                  },
                  "status": {
                    "type": "string",
                    "description": "The status of event schedule."
                  }
                },
                "required": [
                  "name",
                  "stage",
                  "expressionType",
                  "actions",
                  "status"
                ]
              },
              "example": {
                "name": "IDT-EventSchedule",
                "description": "IDT-EventSchedule-Description",
                "stage": "EventBridgeScheduler",
                "status": "Enabled",
                "targetName": "IoTCore-Target-Name",
                "expressionType": "cron",
                "hashtags": ["Important"],
                "cronExpression": {
                  "atHours": 11,
                  "atMinutes": 47,
                  "dayOfMonth": [7]
                },
                "actions": [
                  {
                    "type": "EnqueueDevice",
                    "parameters": {
                      "name": "Power Off",
                      "assetId": "a-assetId",
                      "confirmed": true,
                      "fPort": 85,
                      "payload": "080000ff",
                      "payloadDataType": "string"
                    }
                  }
                ]
              },
              "description": ""
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {},
                      "required": []
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "404": {
            "description": "The resource hasn't found."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      },
      "get": {
        "summary": "List Event Schedules",
        "description": "List event schedules",
        "operationId": "Workflows.ListEventSchedules",
        "tags": ["Workflows"],
        "parameters": [
          {
            "name": "organizationId",
            "description": "The ID of organization.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "stage",
            "description": "The stage of event schedule.",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["Edge", "EventBridgeScheduler"]
            },
            "required": false
          },
          {
            "name": "maxResults",
            "description": "The maximum number of results to return.",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "nextToken",
            "description": "To retrieve the next set of results.",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false
          }
        ],
        "requestBody": {},
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {},
                      "required": []
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "404": {
            "description": "The resource hasn't found."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      }
    },
    "/organizations/{organizationId}/event-rules/{eventRuleId}": {
      "delete": {
        "summary": "Delete Event Rule",
        "description": "Delete event rule",
        "operationId": "Workflows.DeleteEventRule",
        "tags": ["Workflows"],
        "parameters": [
          {
            "name": "organizationId",
            "description": "The ID of organization.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "eventRuleId",
            "description": "The ID of event rule.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {},
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {},
                      "required": []
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "404": {
            "description": "The resource hasn't found."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      },
      "get": {
        "summary": "Get Event Rule",
        "description": "Get event rule",
        "operationId": "Workflows.GetEventRule",
        "tags": ["Workflows"],
        "parameters": [
          {
            "name": "organizationId",
            "description": "The ID of organization.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "eventRuleId",
            "description": "The ID of event rule.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {},
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {},
                      "required": []
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "404": {
            "description": "The resource hasn't found."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      },
      "put": {
        "summary": "Update Event Rule",
        "description": "Update event rule",
        "operationId": "Workflows.UpdateEventRule",
        "tags": ["Workflows"],
        "parameters": [
          {
            "name": "organizationId",
            "description": "The ID of organization.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "eventRuleId",
            "description": "The ID of event rule.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of event rule."
                  },
                  "description": {
                    "type": "string",
                    "description": "The description of event rule."
                  },
                  "expression": {
                    "type": "string",
                    "description": "The expression of event rule."
                  },
                  "conditions": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {},
                      "required": []
                    },
                    "description": "The conditions of event rule."
                  },
                  "devices": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "The devices of event rule."
                  },
                  "period": {
                    "type": "object",
                    "properties": {},
                    "required": [],
                    "description": "The period of event rule."
                  },
                  "actions": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {},
                      "required": []
                    },
                    "description": "The actions of event rule."
                  },
                  "hashtags": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "The hashtags of event rule."
                  },
                  "status": {
                    "type": "string",
                    "description": "The status of event rule."
                  }
                },
                "required": ["name", "period", "actions", "status"]
              },
              "example": {
                "name": "IDT-EventRule",
                "description": "IDT-EventRule-Description",
                "stage": "IoTCore",
                "status": "Enabled",
                "targetName": "IoTCore-Target-Name",
                "expression": "IoTCore-Expression",
                "hashtags": ["Important"],
                "conditions": [
                  {
                    "assetId": "a-assetId",
                    "property": "Temperature",
                    "symbol": ">",
                    "valueDataType": "integer",
                    "value": "25",
                    "operator": "AND"
                  }
                ],
                "devices": ["a-assetId"],
                "period": {
                  "startTime": {
                    "hour": 20,
                    "minute": 34
                  },
                  "endTime": {
                    "hour": 21,
                    "minute": 34
                  },
                  "dayOfWeek": [
                    "Sun",
                    "Mon",
                    "Tue",
                    "Wed",
                    "Thu",
                    "Fri",
                    "Sat"
                  ],
                  "dayOfMonth": [31]
                },
                "actions": [
                  {
                    "type": "enqueue",
                    "parameters": {
                      "name": "Power Off",
                      "assetId": "a-assetId",
                      "confirmed": true,
                      "fPort": 85,
                      "payload": "080000ff",
                      "payloadDataType": "string"
                    }
                  }
                ]
              },
              "description": ""
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {},
                      "required": []
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "404": {
            "description": "The resource hasn't found."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      }
    },
    "/organizations/{organizationId}/event-schedules/{eventScheduleId}": {
      "delete": {
        "summary": "Delete Event Schedule",
        "description": "Delete event schedule",
        "operationId": "Workflows.DeleteEventSchedule",
        "tags": ["Workflows"],
        "parameters": [
          {
            "name": "organizationId",
            "description": "The ID of organization.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "eventScheduleId",
            "description": "The ID of event schedule.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {},
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {},
                      "required": []
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "404": {
            "description": "The resource hasn't found."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      },
      "get": {
        "summary": "Get Event Schedule",
        "description": "Get event schedule",
        "operationId": "Workflows.GetEventSchedule",
        "tags": ["Workflows"],
        "parameters": [
          {
            "name": "organizationId",
            "description": "The ID of organization.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "eventScheduleId",
            "description": "The ID of event schedule.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {},
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {},
                      "required": []
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "404": {
            "description": "The resource hasn't found."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      },
      "put": {
        "summary": "Update Event Schedule",
        "description": "Update event schedule",
        "operationId": "Workflows.UpdateEventSchedule",
        "tags": ["Workflows"],
        "parameters": [
          {
            "name": "organizationId",
            "description": "The ID of organization.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "eventScheduleId",
            "description": "The ID of event schedule.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of event schedule."
                  },
                  "description": {
                    "type": "string",
                    "description": "The description of event schedule."
                  },
                  "expressionType": {
                    "type": "string",
                    "description": "The expression type of event schedule."
                  },
                  "oneTimeExpression": {
                    "type": "number",
                    "description": "The one-time expression of event schedule."
                  },
                  "cronExpression": {
                    "type": "object",
                    "properties": {},
                    "required": [],
                    "description": "The cron expression of event schedule."
                  },
                  "rateExpression": {
                    "type": "object",
                    "properties": {},
                    "required": [],
                    "description": "The rate expression of event schedule."
                  },
                  "timezone": {
                    "type": "number",
                    "description": "The timezone of event schedule."
                  },
                  "startDate": {
                    "type": "number",
                    "description": "The start date of event schedule."
                  },
                  "endDate": {
                    "type": "number",
                    "description": "The end date of event schedule."
                  },
                  "actions": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "The actions of event schedule."
                  },
                  "hashtags": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "The hashtags of event schedule."
                  },
                  "status": {
                    "type": "string",
                    "description": "The status of event schedule."
                  }
                },
                "required": ["expressionType", "actions", "status"]
              },
              "example": {
                "name": "IDT-EventSchedule",
                "description": "IDT-EventSchedule-Description",
                "stage": "EventBridgeScheduler",
                "status": "Enabled",
                "targetName": "IoTCore-Target-Name",
                "expressionType": "cron",
                "hashtags": ["Important"],
                "cronExpression": {
                  "atHours": 11,
                  "atMinutes": 47,
                  "dayOfMonth": [7]
                },
                "actions": [
                  {
                    "type": "EnqueueDevice",
                    "parameters": {
                      "name": "Power Off",
                      "assetId": "a-assetId",
                      "confirmed": true,
                      "fPort": 85,
                      "payload": "080000ff",
                      "payloadDataType": "string"
                    }
                  }
                ]
              },
              "description": ""
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {},
                      "required": []
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "404": {
            "description": "The resource hasn't found."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      }
    },
    "/organizations/{organizationId}/work-requests/{workRequestId}/accept": {
      "put": {
        "summary": "Accept Work Request",
        "description": "Accept work request to order",
        "operationId": "Works.AcceptWorkRequest",
        "tags": ["Works"],
        "parameters": [
          {
            "name": "organizationId",
            "description": "The ID of organization.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "workRequestId",
            "description": "The ID of work request.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {},
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {},
                      "required": []
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "404": {
            "description": "The resource hasn't found."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      }
    },
    "/organizations/{organizationId}/work-requests/{workRequestId}/archive": {
      "put": {
        "summary": "Archive Work Request",
        "description": "Archive work request",
        "operationId": "Works.ArchiveWorkRequest",
        "tags": ["Works"],
        "parameters": [
          {
            "name": "organizationId",
            "description": "The ID of organization.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "workRequestId",
            "description": "The ID of work request.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "reason": {
                    "type": "string",
                    "description": "The reason of reject work request."
                  }
                },
                "required": ["reason"]
              },
              "example": {
                "reason": "IDT-Archive-Reason"
              },
              "description": ""
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {},
                      "required": []
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "404": {
            "description": "The resource hasn't found."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      }
    },
    "/organizations/{organizationId}/work-requests/{workRequestId}/cancel": {
      "put": {
        "summary": "Cancel Work Request",
        "description": "Cancel work request",
        "operationId": "Works.CancelWorkRequest",
        "tags": ["Works"],
        "parameters": [
          {
            "name": "organizationId",
            "description": "The ID of organization.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "workRequestId",
            "description": "The ID of work request.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {},
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {},
                      "required": []
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "404": {
            "description": "The resource hasn't found."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      }
    },
    "/organizations/{organizationId}/work-orders": {
      "post": {
        "summary": "Create Work Order",
        "description": "Create work order",
        "operationId": "Works.CreateWorkOrder",
        "tags": ["Works"],
        "parameters": [
          {
            "name": "organizationId",
            "description": "The ID of organization.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "description": "The type of work order(Normal, Template)."
                  },
                  "subject": {
                    "type": "string",
                    "description": "The subject of work order."
                  },
                  "description": {
                    "type": "string",
                    "description": "The description of work order."
                  },
                  "expiredAt": {
                    "type": "number",
                    "description": "The expired time of work order(Must be a multiple of 15 minutes)."
                  },
                  "workTime": {
                    "type": "number",
                    "description": "The workTime of work order, when type is template."
                  },
                  "scheduleType": {
                    "type": "string",
                    "description": "The schedule type of work order."
                  },
                  "daysOfWeek": {
                    "type": "array",
                    "items": {
                      "type": "boolean"
                    },
                    "description": "Days of week, ex: [false, true, false, false, false, true, false] is monday and friday of week."
                  },
                  "everyWeeks": {
                    "type": "number",
                    "description": "How many weeks interval, ex: 1 is every week, 2 is interval of one week."
                  },
                  "dayOfMonth": {
                    "type": "number",
                    "description": "Day of month, ex: 22 is 22th day of every month."
                  },
                  "everyMonths": {
                    "type": "number",
                    "description": "How many months interval, ex: 1 is every month, 2 is interval of one month(1/22, 3/22, 5/22 etc...)."
                  },
                  "everyYears": {
                    "type": "number",
                    "description": "How many years interval, ex: 1 is every year, 2 is interval of one year(2023/01/22, 2025/01/22, 2027/01/22 etc...)."
                  },
                  "aheadOfTime": {
                    "type": "number",
                    "description": "Ahead of time(seconds) to available in the list."
                  },
                  "assignee": {
                    "type": "object",
                    "properties": {},
                    "required": [],
                    "description": "The assignee of work order."
                  },
                  "priority": {
                    "type": "string",
                    "description": "The priority of work order."
                  },
                  "workRequestId": {
                    "type": "string",
                    "description": "The ID of work request."
                  },
                  "locationId": {
                    "type": "string",
                    "description": "The location ID of work order."
                  },
                  "procedures": {
                    "type": "string",
                    "description": "The procedures of work order."
                  },
                  "images": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "The images of work order."
                  },
                  "files": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "The files of work order."
                  },
                  "partIds": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "The ID list of part."
                  },
                  "assetIds": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "The ID list of asset."
                  },
                  "enableNotify": {
                    "type": "boolean",
                    "description": "Enable/Disable notification."
                  }
                },
                "required": ["type", "subject", "expiredAt", "priority"]
              },
              "example": {
                "subject": "IDT-WorkOrder",
                "description": "IDT-WorkOrder-Description",
                "locationId": "l-locationId",
                "type": "Normal",
                "priority": "Low",
                "scheduleType": "Daily",
                "aheadOfTime": 3600,
                "enableNotify": true,
                "files": ["Infodeck-Bot-0001.pdf"],
                "images": ["Asset-Image.png"],
                "assignee": [
                  {
                    "type": "Team",
                    "id": "t-teamId"
                  },
                  {
                    "type": "User",
                    "id": "593b34c0-xxxx-xxxx-xxxx-a454c6f9f50d"
                  }
                ],
                "expiredAt": 1700000000000
              },
              "description": ""
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "subject": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "expiredAt": {
                          "type": "number"
                        },
                        "workTime": {
                          "type": "number"
                        },
                        "scheduleType": {
                          "type": "string"
                        },
                        "daysOfWeek": {
                          "type": "array",
                          "items": {
                            "type": "boolean"
                          }
                        },
                        "everyWeeks": {
                          "type": "number"
                        },
                        "dayOfMonth": {
                          "type": "number"
                        },
                        "everyMonths": {
                          "type": "number"
                        },
                        "everyYears": {
                          "type": "number"
                        },
                        "aheadOfTime": {
                          "type": "number"
                        },
                        "assignee": {
                          "type": "object",
                          "properties": {},
                          "required": []
                        },
                        "priority": {
                          "type": "string"
                        },
                        "workRequestId": {
                          "type": "string"
                        },
                        "locationId": {
                          "type": "string"
                        },
                        "procedures": {
                          "type": "string"
                        },
                        "images": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "files": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "partIds": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "assetIds": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "enableNotify": {
                          "type": "boolean"
                        },
                        "createdBy": {
                          "type": "object",
                          "properties": {},
                          "required": []
                        },
                        "createdAt": {
                          "type": "number"
                        }
                      },
                      "required": [
                        "type",
                        "subject",
                        "expiredAt",
                        "priority",
                        "createdBy",
                        "createdAt"
                      ]
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "404": {
            "description": "The resource hasn't found."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      },
      "get": {
        "summary": "List Work Orders",
        "description": "List work orders",
        "operationId": "Works.ListWorkOrders",
        "tags": ["Works"],
        "parameters": [
          {
            "name": "organizationId",
            "description": "The ID of organization.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "description": "The type of work order.",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["Normal", "Template"]
            },
            "required": true
          },
          {
            "name": "assetId",
            "description": "The Id of asset.",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "startDate",
            "description": "The start date number of timestamp. (Default: 1700000000000)",
            "in": "query",
            "schema": {
              "type": "number"
            },
            "required": false
          },
          {
            "name": "endDate",
            "description": "The end date number of timestamp. (Default: 1700000000000)",
            "in": "query",
            "schema": {
              "type": "number"
            },
            "required": false
          },
          {
            "name": "maxResults",
            "description": "The maximum number of results to return.",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "nextToken",
            "description": "To retrieve the next set of results.",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false
          }
        ],
        "requestBody": {},
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "subject": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "expiredAt": {
                          "type": "number"
                        },
                        "workTime": {
                          "type": "number"
                        },
                        "scheduleType": {
                          "type": "string"
                        },
                        "daysOfWeek": {
                          "type": "array",
                          "items": {
                            "type": "boolean"
                          }
                        },
                        "everyWeeks": {
                          "type": "number"
                        },
                        "dayOfMonth": {
                          "type": "number"
                        },
                        "everyMonths": {
                          "type": "number"
                        },
                        "everyYears": {
                          "type": "number"
                        },
                        "aheadOfTime": {
                          "type": "number"
                        },
                        "assignee": {
                          "type": "object",
                          "properties": {},
                          "required": []
                        },
                        "priority": {
                          "type": "string"
                        },
                        "workRequestId": {
                          "type": "string"
                        },
                        "locationId": {
                          "type": "string"
                        },
                        "procedures": {
                          "type": "string"
                        },
                        "images": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "files": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "partIds": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "assetIds": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "enableNotify": {
                          "type": "boolean"
                        },
                        "createdAt": {
                          "type": "number"
                        }
                      },
                      "required": [
                        "type",
                        "subject",
                        "expiredAt",
                        "priority",
                        "createdAt"
                      ]
                    },
                    "nextToken": {}
                  },
                  "required": ["data", "nextToken"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "404": {
            "description": "The resource hasn't found."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      }
    },
    "/organizations/{organizationId}/work-requests": {
      "post": {
        "summary": "Create Work Request",
        "description": "Create work request",
        "operationId": "Works.CreateWorkRequest",
        "tags": ["Works"],
        "parameters": [
          {
            "name": "organizationId",
            "description": "The ID of organization.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "isTemplate": {
                    "type": "boolean",
                    "description": "The work request is template."
                  },
                  "subject": {
                    "type": "string",
                    "description": "The subject of work request."
                  },
                  "description": {
                    "type": "string",
                    "description": "The description of work request."
                  },
                  "locationId": {
                    "type": "string",
                    "description": "The location ID of work order."
                  },
                  "images": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "The images of work request."
                  },
                  "files": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "The files of work request."
                  },
                  "assetId": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "The assetId of work request."
                  },
                  "priority": {
                    "type": "string",
                    "description": "The priority of work order."
                  }
                },
                "required": ["subject", "priority"]
              },
              "example": {
                "subject": "IDT-WorkRequest",
                "description": "IDT-WorkRequest-Description",
                "locationId": "l-locationId",
                "priority": "Medium",
                "isTemplate": false,
                "assetIds": ["a-assetId"],
                "images": ["Asset-Image.png"],
                "files": ["Infodeck-Bot-0001.pdf"]
              },
              "description": ""
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {},
                      "required": []
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "404": {
            "description": "The resource hasn't found."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      },
      "get": {
        "summary": "List Work Requests",
        "description": "List work requests",
        "operationId": "Works.ListWorkRequests",
        "tags": ["Works"],
        "parameters": [
          {
            "name": "organizationId",
            "description": "The ID of organization.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isTemplate",
            "description": "Retuen templates of work request.",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["true", "false"]
            },
            "required": false
          },
          {
            "name": "assetId",
            "description": "The Id of asset.",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "startDate",
            "description": "The start date number of query.",
            "in": "query",
            "schema": {
              "type": "number"
            },
            "required": false
          },
          {
            "name": "endDate",
            "description": "The end date number of query.",
            "in": "query",
            "schema": {
              "type": "number"
            },
            "required": false
          },
          {
            "name": "maxResults",
            "description": "The maximum number of results to return.",
            "in": "query",
            "schema": {
              "type": "number"
            },
            "required": false
          },
          {
            "name": "nextToken",
            "description": "To retrieve the next set of results.",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "reason": {
                    "type": "string",
                    "description": "The reason of reject work request."
                  }
                },
                "required": ["reason"]
              },
              "example": {},
              "description": ""
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "subject": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "images": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "reason": {
                          "type": "string"
                        },
                        "status": {
                          "type": "string"
                        },
                        "priority": {
                          "type": "string"
                        },
                        "locationId": {
                          "type": "string"
                        },
                        "assetIds": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "createdAt": {
                          "type": "number"
                        }
                      },
                      "required": ["subject", "priority"]
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "404": {
            "description": "The resource hasn't found."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      }
    },
    "/organizations/{organizationId}/work-orders/{workOrderId}": {
      "delete": {
        "summary": "Delete Work Order",
        "description": "Delete work order",
        "operationId": "Works.DeleteWorkOrder",
        "tags": ["Works"],
        "parameters": [
          {
            "name": "organizationId",
            "description": "The ID of organization.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "workOrderId",
            "description": "The ID of work order.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {},
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {},
                      "required": []
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "404": {
            "description": "The resource hasn't found."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      },
      "get": {
        "summary": "Get Work Order",
        "description": "Get work order",
        "operationId": "Works.GetWorkOrder",
        "tags": ["Works"],
        "parameters": [
          {
            "name": "organizationId",
            "description": "The ID of organization.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "workOrderId",
            "description": "The ID of work order.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {},
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "subject": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "expiredAt": {
                          "type": "number"
                        },
                        "workTime": {
                          "type": "number"
                        },
                        "scheduleType": {
                          "type": "string"
                        },
                        "daysOfWeek": {
                          "type": "array",
                          "items": {
                            "type": "boolean"
                          }
                        },
                        "everyWeeks": {
                          "type": "number"
                        },
                        "dayOfMonth": {
                          "type": "number"
                        },
                        "everyMonths": {
                          "type": "number"
                        },
                        "everyYears": {
                          "type": "number"
                        },
                        "aheadOfTime": {
                          "type": "number"
                        },
                        "assignee": {
                          "type": "object",
                          "properties": {},
                          "required": []
                        },
                        "priority": {
                          "type": "string"
                        },
                        "workRequestId": {
                          "type": "string"
                        },
                        "locationId": {
                          "type": "string"
                        },
                        "procedures": {
                          "type": "string"
                        },
                        "images": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "files": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "partIds": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "assetIds": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "enableNotify": {
                          "type": "boolean"
                        },
                        "createdBy": {
                          "type": "object",
                          "properties": {},
                          "required": []
                        },
                        "createdAt": {
                          "type": "number"
                        }
                      },
                      "required": [
                        "type",
                        "subject",
                        "expiredAt",
                        "priority",
                        "createdBy",
                        "createdAt"
                      ]
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "404": {
            "description": "The resource hasn't found."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      },
      "put": {
        "summary": "Update Work Order",
        "description": "Update work order",
        "operationId": "Works.UpdateWorkOrder",
        "tags": ["Works"],
        "parameters": [
          {
            "name": "organizationId",
            "description": "The ID of organization.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "workOrderId",
            "description": "The ID of work order.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "subject": {
                    "type": "string",
                    "description": "The subject of work order."
                  },
                  "description": {
                    "type": "string",
                    "description": "The description of work order."
                  },
                  "expiredAt": {
                    "type": "string",
                    "description": "The expired time of work order."
                  },
                  "workTime": {
                    "type": "number",
                    "description": "The workTime of work order, when type is template."
                  },
                  "scheduleType": {
                    "type": "string",
                    "description": "The schedule type of work order."
                  },
                  "daysOfWeek": {
                    "type": "array",
                    "items": {
                      "type": "boolean"
                    },
                    "description": "Days of week, ex: [false, true, false, false, false, true, false] is monday and friday of week."
                  },
                  "everyWeeks": {
                    "type": "number",
                    "description": "How many weeks interval, ex: 1 is every week, 2 is interval of one week."
                  },
                  "dayOfMonth": {
                    "type": "number",
                    "description": "Day of month, ex: 22 is 22th day of every month."
                  },
                  "everyMonths": {
                    "type": "number",
                    "description": "How many months interval, ex: 1 is every month, 2 is interval of one month(1/22, 3/22, 5/22 etc...)."
                  },
                  "everyYears": {
                    "type": "number",
                    "description": "How many years interval, ex: 1 is every year, 2 is interval of one year(2023/01/22, 2025/01/22, 2027/01/22 etc...)."
                  },
                  "aheadOfTime": {
                    "type": "number",
                    "description": "Ahead of time(seconds) to available in the list."
                  },
                  "assignee": {
                    "type": "object",
                    "properties": {},
                    "required": [],
                    "description": "The assignee of work order."
                  },
                  "priority": {
                    "type": "string",
                    "description": "The priority of work order."
                  },
                  "workRequestId": {
                    "type": "string",
                    "description": "The ID of work request."
                  },
                  "locationId": {
                    "type": "string",
                    "description": "The location ID of work order."
                  },
                  "procedures": {
                    "type": "string",
                    "description": "The procedures of work order."
                  },
                  "images": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "The images of work order."
                  },
                  "files": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "The files of work order."
                  },
                  "partIds": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "The ID list of part."
                  },
                  "assetIds": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "The ID list of asset."
                  },
                  "enableNotify": {
                    "type": "boolean",
                    "description": "Enable/Disable notification."
                  }
                },
                "required": []
              },
              "example": {
                "subject": "IDT-WorkOrder",
                "description": "IDT-WorkOrder-Description",
                "locationId": "l-locationId",
                "type": "Normal",
                "priority": "Low",
                "scheduleType": "Daily",
                "aheadOfTime": 3600,
                "enableNotify": true,
                "files": ["Infodeck-Bot-0001.pdf"],
                "images": ["Asset-Image.png"],
                "assignee": [
                  {
                    "type": "Team",
                    "id": "t-teamId"
                  },
                  {
                    "type": "User",
                    "id": "593b34c0-xxxx-xxxx-xxxx-a454c6f9f50d"
                  }
                ],
                "expiredAt": 1700000000000
              },
              "description": ""
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "subject": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "expiredAt": {
                          "type": "number"
                        },
                        "workTime": {
                          "type": "number"
                        },
                        "scheduleType": {
                          "type": "string"
                        },
                        "daysOfWeek": {
                          "type": "array",
                          "items": {
                            "type": "boolean"
                          }
                        },
                        "everyWeeks": {
                          "type": "number"
                        },
                        "dayOfMonth": {
                          "type": "number"
                        },
                        "everyMonths": {
                          "type": "number"
                        },
                        "everyYears": {
                          "type": "number"
                        },
                        "aheadOfTime": {
                          "type": "number"
                        },
                        "assignee": {
                          "type": "object",
                          "properties": {},
                          "required": []
                        },
                        "priority": {
                          "type": "string"
                        },
                        "workRequestId": {
                          "type": "string"
                        },
                        "locationId": {
                          "type": "string"
                        },
                        "procedures": {
                          "type": "string"
                        },
                        "images": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "files": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "partIds": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "assetIds": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "enableNotify": {
                          "type": "boolean"
                        },
                        "createdBy": {
                          "type": "object",
                          "properties": {},
                          "required": []
                        },
                        "createdAt": {
                          "type": "number"
                        }
                      },
                      "required": [
                        "type",
                        "subject",
                        "expiredAt",
                        "priority",
                        "createdBy",
                        "createdAt"
                      ]
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "404": {
            "description": "The resource hasn't found."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      }
    },
    "/organizations/{organizationId}/work-requests/{workRequestId}": {
      "delete": {
        "summary": "Delete Work Request",
        "description": "Delete work request",
        "operationId": "Works.DeleteWorkRequest",
        "tags": ["Works"],
        "parameters": [
          {
            "name": "organizationId",
            "description": "The ID of organization.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "workRequestId",
            "description": "The ID of work request.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {},
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {},
                      "required": []
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "404": {
            "description": "The resource hasn't found."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      },
      "get": {
        "summary": "Get Work Request",
        "description": "Get work request",
        "operationId": "Works.GetWorkRequest",
        "tags": ["Works"],
        "parameters": [
          {
            "name": "organizationId",
            "description": "The ID of organization.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "workRequestId",
            "description": "The ID of work request.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {},
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {},
                      "required": []
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "404": {
            "description": "The resource hasn't found."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      },
      "put": {
        "summary": "Update Work Request",
        "description": "Update work request",
        "operationId": "Works.UpdateWorkRequest",
        "tags": ["Works"],
        "parameters": [
          {
            "name": "organizationId",
            "description": "The ID of organization.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "workRequestId",
            "description": "The ID of work request.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "isTemplate": {
                    "type": "boolean",
                    "description": "The work request is template."
                  },
                  "subject": {
                    "type": "string",
                    "description": "The subject of work request."
                  },
                  "description": {
                    "type": "string",
                    "description": "The description of work request."
                  },
                  "locationId": {
                    "type": "string",
                    "description": "The location ID of work order."
                  },
                  "images": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "The images of work request."
                  },
                  "priority": {
                    "type": "string",
                    "description": "The priority of work order."
                  }
                },
                "required": []
              },
              "example": {
                "subject": "IDT-WorkRequest",
                "description": "IDT-WorkRequest-Description",
                "locationId": "l-locationId",
                "priority": "Medium",
                "isTemplate": false,
                "images": ["Asset-Image.png"]
              },
              "description": ""
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {},
                      "required": []
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "404": {
            "description": "The resource hasn't found."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      }
    },
    "/organizations/{organizationId}/users/{userId}/work-orders/all": {
      "get": {
        "summary": "Get Work Orders By User",
        "description": "Get work orders by user",
        "operationId": "Works.GetWorkOrdersByUser",
        "tags": ["Works"],
        "parameters": [
          {
            "name": "organizationId",
            "description": "The ID of organization.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "description": "The ID of user.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDate",
            "description": "The start date number of timestamp. (Default: 1700000000000)",
            "in": "query",
            "schema": {
              "type": "number"
            },
            "required": true
          },
          {
            "name": "endDate",
            "description": "The end date number of timestamp. (Default: 1700000000000)",
            "in": "query",
            "schema": {
              "type": "number"
            },
            "required": true
          },
          {
            "name": "filterStatus",
            "description": "The status of work order. (Default: optional ; Options: Open, Accept, InProgress, OnHold, Complete, Close)",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "required": false
          }
        ],
        "requestBody": {},
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string"
                          },
                          "subject": {
                            "type": "string"
                          },
                          "description": {
                            "type": "string"
                          },
                          "expiredAt": {
                            "type": "number"
                          },
                          "workTime": {
                            "type": "number"
                          },
                          "scheduleType": {
                            "type": "string"
                          },
                          "daysOfWeek": {
                            "type": "array",
                            "items": {
                              "type": "boolean"
                            }
                          },
                          "everyWeeks": {
                            "type": "number"
                          },
                          "dayOfMonth": {
                            "type": "number"
                          },
                          "everyMonths": {
                            "type": "number"
                          },
                          "everyYears": {
                            "type": "number"
                          },
                          "aheadOfTime": {
                            "type": "number"
                          },
                          "assignee": {
                            "type": "object",
                            "properties": {},
                            "required": []
                          },
                          "priority": {
                            "type": "string"
                          },
                          "workRequestId": {
                            "type": "string"
                          },
                          "locationId": {
                            "type": "string"
                          },
                          "procedures": {
                            "type": "string"
                          },
                          "images": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "files": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "partIds": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "assetIds": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "enableNotify": {
                            "type": "boolean"
                          },
                          "createdAt": {
                            "type": "number"
                          }
                        },
                        "required": [
                          "type",
                          "subject",
                          "expiredAt",
                          "priority",
                          "createdAt"
                        ]
                      }
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "404": {
            "description": "The resource hasn't found."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      }
    },
    "/organizations/{organizationId}/users/{userId}/work-requests/all": {
      "get": {
        "summary": "Get Work Requests By User",
        "description": "Get work requests by user",
        "operationId": "Works.GetWorkRequestsByUser",
        "tags": ["Works"],
        "parameters": [
          {
            "name": "organizationId",
            "description": "The ID of organization.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "description": "The ID of user.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDate",
            "description": "The start date number of timestamp",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "endDate",
            "description": "The end date number of timestamp",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {},
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {},
                      "required": []
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "404": {
            "description": "The resource hasn't found."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      }
    },
    "/organizations/{organizationId}/users/{userId}/work-orders": {
      "get": {
        "summary": "List Work Orders By User",
        "description": "List work orders by user",
        "operationId": "Works.ListWorkOrdersByUser",
        "tags": ["Works"],
        "parameters": [
          {
            "name": "organizationId",
            "description": "The ID of organization.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "description": "The ID of user.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "teamId",
            "description": "The id of team.",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "maxResults",
            "description": "The maximum number of results to return.",
            "in": "query",
            "schema": {
              "type": "number"
            },
            "required": false
          },
          {
            "name": "nextToken",
            "description": "To retrieve the next set of results.",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "filterStatus",
            "description": "The status of work order. (Default: optional ; Options: Open, Accept, InProgress, OnHold, Complete, Close)",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "required": false
          }
        ],
        "requestBody": {},
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "subject": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "expiredAt": {
                          "type": "number"
                        },
                        "workTime": {
                          "type": "number"
                        },
                        "scheduleType": {
                          "type": "string"
                        },
                        "daysOfWeek": {
                          "type": "array",
                          "items": {
                            "type": "boolean"
                          }
                        },
                        "everyWeeks": {
                          "type": "number"
                        },
                        "dayOfMonth": {
                          "type": "number"
                        },
                        "everyMonths": {
                          "type": "number"
                        },
                        "everyYears": {
                          "type": "number"
                        },
                        "aheadOfTime": {
                          "type": "number"
                        },
                        "assignee": {
                          "type": "object",
                          "properties": {},
                          "required": []
                        },
                        "priority": {
                          "type": "string"
                        },
                        "workRequestId": {
                          "type": "string"
                        },
                        "locationId": {
                          "type": "string"
                        },
                        "procedures": {
                          "type": "string"
                        },
                        "images": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "files": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "partIds": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "assetIds": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "enableNotify": {
                          "type": "boolean"
                        },
                        "createdAt": {
                          "type": "number"
                        }
                      },
                      "required": [
                        "type",
                        "subject",
                        "expiredAt",
                        "priority",
                        "createdAt"
                      ]
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "404": {
            "description": "The resource hasn't found."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      }
    },
    "/organizations/{organizationId}/users/{userId}/work-requests": {
      "get": {
        "summary": "List Work Requests By User",
        "description": "List work requests by user",
        "operationId": "Works.ListWorkRequestsByUser",
        "tags": ["Works"],
        "parameters": [
          {
            "name": "organizationId",
            "description": "The ID of organization.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "description": "The ID of user.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filterStatus",
            "description": "The status of work order. (Default: optional ; Options: Open, Accept, InProgress, OnHold, Complete, Close)",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "required": false
          },
          {
            "name": "maxResults",
            "description": "The maximum number of results to return.",
            "in": "query",
            "schema": {
              "type": "number"
            },
            "required": false
          },
          {
            "name": "nextToken",
            "description": "To retrieve the next set of results.",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false
          }
        ],
        "requestBody": {},
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {},
                      "required": []
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "404": {
            "description": "The resource hasn't found."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      }
    },
    "/organizations/{organizationId}/work-requests/{workRequestId}/reject": {
      "put": {
        "summary": "Reject Work Request",
        "description": "Reject work request",
        "operationId": "Works.RejectWorkRequest",
        "tags": ["Works"],
        "parameters": [
          {
            "name": "organizationId",
            "description": "The ID of organization.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "workRequestId",
            "description": "The ID of work request.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "reason": {
                    "type": "string",
                    "description": "The reason of reject work request."
                  }
                },
                "required": ["reason"]
              },
              "example": {
                "reason": "IDT-Archive-Reason"
              },
              "description": ""
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {},
                      "required": []
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "404": {
            "description": "The resource hasn't found."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      }
    },
    "/organizations/{organizationId}/work-orders/{workOrderId}/status": {
      "put": {
        "summary": "Update Work Order status",
        "description": "Update work order",
        "operationId": "Works.UpdateWorkOrderStatus",
        "tags": ["Works"],
        "parameters": [
          {
            "name": "organizationId",
            "description": "The ID of organization.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "workOrderId",
            "description": "The ID of work order.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "status": {
                    "type": "string",
                    "description": "The status of work order."
                  },
                  "duplicate": {
                    "type": "string",
                    "description": "The work order need duplicate."
                  }
                },
                "required": ["status", "duplicate"]
              },
              "example": {
                "status": "InProgress",
                "duplicate": false
              },
              "description": ""
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "subject": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "expiredAt": {
                          "type": "number"
                        },
                        "workTime": {
                          "type": "number"
                        },
                        "scheduleType": {
                          "type": "string"
                        },
                        "daysOfWeek": {
                          "type": "array",
                          "items": {
                            "type": "boolean"
                          }
                        },
                        "everyWeeks": {
                          "type": "number"
                        },
                        "dayOfMonth": {
                          "type": "number"
                        },
                        "everyMonths": {
                          "type": "number"
                        },
                        "everyYears": {
                          "type": "number"
                        },
                        "aheadOfTime": {
                          "type": "number"
                        },
                        "assignee": {
                          "type": "object",
                          "properties": {},
                          "required": []
                        },
                        "priority": {
                          "type": "string"
                        },
                        "workRequestId": {
                          "type": "string"
                        },
                        "locationId": {
                          "type": "string"
                        },
                        "procedures": {
                          "type": "string"
                        },
                        "images": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "files": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "partIds": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "assetIds": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "enableNotify": {
                          "type": "boolean"
                        },
                        "createdBy": {
                          "type": "object",
                          "properties": {},
                          "required": []
                        },
                        "createdAt": {
                          "type": "number"
                        }
                      },
                      "required": [
                        "type",
                        "subject",
                        "expiredAt",
                        "priority",
                        "createdBy",
                        "createdAt"
                      ]
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          },
          "400": {
            "description": "The request has not permission."
          },
          "404": {
            "description": "The resource hasn't found."
          },
          "422": {
            "description": "The input data has invalid."
          }
        },
        "security": [
          {
            "user": []
          }
        ]
      }
    }
  },
  "components": {
    "securitySchemes": {
      "user": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "Get your API token via POST /authentications/tokens"
      }
    }
  },
  "security": [
    {
      "user": []
    }
  ],
  "tags": [
    {
      "name": "Asset"
    },
    {
      "name": "Authentication"
    },
    {
      "name": "Deck"
    },
    {
      "name": "Edge Gateways"
    },
    {
      "name": "Feedback"
    },
    {
      "name": "Integration"
    },
    {
      "name": "LNS Application"
    },
    {
      "name": "LNS Device"
    },
    {
      "name": "LNS Device Profile"
    },
    {
      "name": "LNS Gateway"
    },
    {
      "name": "Location"
    },
    {
      "name": "Notification"
    },
    {
      "name": "Organization"
    },
    {
      "name": "Organization Addons"
    },
    {
      "name": "Organization Team"
    },
    {
      "name": "Services"
    },
    {
      "name": "Statistics"
    },
    {
      "name": "Thing"
    },
    {
      "name": "User Notification"
    },
    {
      "name": "Workflows"
    },
    {
      "name": "Works"
    }
  ]
}
